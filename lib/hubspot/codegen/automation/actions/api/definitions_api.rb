=begin
#Automation Actions V4

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module Hubspot
  module Automation
    module Actions
      class DefinitionsApi
        attr_accessor :api_client

        def initialize(api_client = ApiClient.default)
          @api_client = api_client
        end
        # Delete an action definition
        # Delete an action definition by ID.
        # @param definition_id [String] The ID of the custom action definition.
        # @param app_id [Integer] The ID of the app.
        # @param [Hash] opts the optional parameters
        # @return [nil]
        def archive(definition_id, app_id, opts = {})
          archive_with_http_info(definition_id, app_id, opts)
          nil
        end

        # Delete an action definition
        # Delete an action definition by ID.
        # @param definition_id [String] The ID of the custom action definition.
        # @param app_id [Integer] The ID of the app.
        # @param [Hash] opts the optional parameters
        # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
        def archive_with_http_info(definition_id, app_id, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: DefinitionsApi.archive ...'
          end
          # verify the required parameter 'definition_id' is set
          if @api_client.config.client_side_validation && definition_id.nil?
            fail ArgumentError, "Missing the required parameter 'definition_id' when calling DefinitionsApi.archive"
          end
          # verify the required parameter 'app_id' is set
          if @api_client.config.client_side_validation && app_id.nil?
            fail ArgumentError, "Missing the required parameter 'app_id' when calling DefinitionsApi.archive"
          end
          # resource path
          local_var_path = '/automation/v4/actions/{appId}/{definitionId}'.sub('{' + 'definitionId' + '}', CGI.escape(definition_id.to_s)).sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['*/*'])

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body]

          # return_type
          return_type = opts[:debug_return_type]

          # auth_names
          auth_names = opts[:debug_auth_names] || ['developer_hapikey']

          new_options = opts.merge(
            :operation => :"DefinitionsApi.archive",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: DefinitionsApi#archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Create a new custom action definition
        # Create a new custom workflow action.
        # @param app_id [Integer] The ID of the app.
        # @param public_action_definition_egg [PublicActionDefinitionEgg] 
        # @param [Hash] opts the optional parameters
        # @return [PublicActionDefinition]
        def create(app_id, public_action_definition_egg, opts = {})
          data, _status_code, _headers = create_with_http_info(app_id, public_action_definition_egg, opts)
          data
        end

        # Create a new custom action definition
        # Create a new custom workflow action.
        # @param app_id [Integer] The ID of the app.
        # @param public_action_definition_egg [PublicActionDefinitionEgg] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(PublicActionDefinition, Integer, Hash)>] PublicActionDefinition data, response status code and response headers
        def create_with_http_info(app_id, public_action_definition_egg, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: DefinitionsApi.create ...'
          end
          # verify the required parameter 'app_id' is set
          if @api_client.config.client_side_validation && app_id.nil?
            fail ArgumentError, "Missing the required parameter 'app_id' when calling DefinitionsApi.create"
          end
          # verify the required parameter 'public_action_definition_egg' is set
          if @api_client.config.client_side_validation && public_action_definition_egg.nil?
            fail ArgumentError, "Missing the required parameter 'public_action_definition_egg' when calling DefinitionsApi.create"
          end
          # resource path
          local_var_path = '/automation/v4/actions/{appId}'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(public_action_definition_egg)

          # return_type
          return_type = opts[:debug_return_type] || 'PublicActionDefinition'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['developer_hapikey']

          new_options = opts.merge(
            :operation => :"DefinitionsApi.create",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: DefinitionsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Retrieve a custom action definition
        # Retrieve a custom workflow action definition by ID.
        # @param definition_id [String] The ID of the custom action.
        # @param app_id [Integer] The ID of the app.
        # @param [Hash] opts the optional parameters
        # @option opts [Boolean] :archived Whether to return only results that have been archived. (default to false)
        # @return [PublicActionDefinition]
        def get_by_id(definition_id, app_id, opts = {})
          data, _status_code, _headers = get_by_id_with_http_info(definition_id, app_id, opts)
          data
        end

        # Retrieve a custom action definition
        # Retrieve a custom workflow action definition by ID.
        # @param definition_id [String] The ID of the custom action.
        # @param app_id [Integer] The ID of the app.
        # @param [Hash] opts the optional parameters
        # @option opts [Boolean] :archived Whether to return only results that have been archived. (default to false)
        # @return [Array<(PublicActionDefinition, Integer, Hash)>] PublicActionDefinition data, response status code and response headers
        def get_by_id_with_http_info(definition_id, app_id, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: DefinitionsApi.get_by_id ...'
          end
          # verify the required parameter 'definition_id' is set
          if @api_client.config.client_side_validation && definition_id.nil?
            fail ArgumentError, "Missing the required parameter 'definition_id' when calling DefinitionsApi.get_by_id"
          end
          # verify the required parameter 'app_id' is set
          if @api_client.config.client_side_validation && app_id.nil?
            fail ArgumentError, "Missing the required parameter 'app_id' when calling DefinitionsApi.get_by_id"
          end
          # resource path
          local_var_path = '/automation/v4/actions/{appId}/{definitionId}'.sub('{' + 'definitionId' + '}', CGI.escape(definition_id.to_s)).sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

          # query parameters
          query_params = opts[:query_params] || {}
          query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body]

          # return_type
          return_type = opts[:debug_return_type] || 'PublicActionDefinition'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['developer_hapikey']

          new_options = opts.merge(
            :operation => :"DefinitionsApi.get_by_id",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: DefinitionsApi#get_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Retrieve custom action definitions
        # Retrieve custom workflow action definitions by app ID.
        # @param app_id [Integer] The ID of the app.
        # @param [Hash] opts the optional parameters
        # @option opts [Integer] :limit The maximum number of results to display per page.
        # @option opts [String] :after The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
        # @option opts [Boolean] :archived Whether to return only results that have been archived. (default to false)
        # @return [CollectionResponsePublicActionDefinitionForwardPaging]
        def get_page(app_id, opts = {})
          data, _status_code, _headers = get_page_with_http_info(app_id, opts)
          data
        end

        # Retrieve custom action definitions
        # Retrieve custom workflow action definitions by app ID.
        # @param app_id [Integer] The ID of the app.
        # @param [Hash] opts the optional parameters
        # @option opts [Integer] :limit The maximum number of results to display per page.
        # @option opts [String] :after The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
        # @option opts [Boolean] :archived Whether to return only results that have been archived. (default to false)
        # @return [Array<(CollectionResponsePublicActionDefinitionForwardPaging, Integer, Hash)>] CollectionResponsePublicActionDefinitionForwardPaging data, response status code and response headers
        def get_page_with_http_info(app_id, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: DefinitionsApi.get_page ...'
          end
          # verify the required parameter 'app_id' is set
          if @api_client.config.client_side_validation && app_id.nil?
            fail ArgumentError, "Missing the required parameter 'app_id' when calling DefinitionsApi.get_page"
          end
          # resource path
          local_var_path = '/automation/v4/actions/{appId}'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

          # query parameters
          query_params = opts[:query_params] || {}
          query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
          query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
          query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body]

          # return_type
          return_type = opts[:debug_return_type] || 'CollectionResponsePublicActionDefinitionForwardPaging'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['developer_hapikey']

          new_options = opts.merge(
            :operation => :"DefinitionsApi.get_page",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: DefinitionsApi#get_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Update an existing action definition
        # Update an existing action definition by ID.
        # @param definition_id [String] The ID of the custom action definition.
        # @param app_id [Integer] The ID of the app.
        # @param public_action_definition_patch [PublicActionDefinitionPatch] 
        # @param [Hash] opts the optional parameters
        # @return [PublicActionDefinition]
        def update(definition_id, app_id, public_action_definition_patch, opts = {})
          data, _status_code, _headers = update_with_http_info(definition_id, app_id, public_action_definition_patch, opts)
          data
        end

        # Update an existing action definition
        # Update an existing action definition by ID.
        # @param definition_id [String] The ID of the custom action definition.
        # @param app_id [Integer] The ID of the app.
        # @param public_action_definition_patch [PublicActionDefinitionPatch] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(PublicActionDefinition, Integer, Hash)>] PublicActionDefinition data, response status code and response headers
        def update_with_http_info(definition_id, app_id, public_action_definition_patch, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: DefinitionsApi.update ...'
          end
          # verify the required parameter 'definition_id' is set
          if @api_client.config.client_side_validation && definition_id.nil?
            fail ArgumentError, "Missing the required parameter 'definition_id' when calling DefinitionsApi.update"
          end
          # verify the required parameter 'app_id' is set
          if @api_client.config.client_side_validation && app_id.nil?
            fail ArgumentError, "Missing the required parameter 'app_id' when calling DefinitionsApi.update"
          end
          # verify the required parameter 'public_action_definition_patch' is set
          if @api_client.config.client_side_validation && public_action_definition_patch.nil?
            fail ArgumentError, "Missing the required parameter 'public_action_definition_patch' when calling DefinitionsApi.update"
          end
          # resource path
          local_var_path = '/automation/v4/actions/{appId}/{definitionId}'.sub('{' + 'definitionId' + '}', CGI.escape(definition_id.to_s)).sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(public_action_definition_patch)

          # return_type
          return_type = opts[:debug_return_type] || 'PublicActionDefinition'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['developer_hapikey']

          new_options = opts.merge(
            :operation => :"DefinitionsApi.update",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: DefinitionsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end
      end
    end
  end
end
