=begin
#Tasks

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module Hubspot
  module Crm
    module Objects
      module Tasks
        class StandardError
          attr_accessor :status

          attr_accessor :id

          attr_accessor :category

          attr_accessor :sub_category

          attr_accessor :message

          attr_accessor :errors

          attr_accessor :context

          attr_accessor :links

          # Attribute mapping from ruby-style variable name to JSON key.
          def self.attribute_map
            {
              :'status' => :'status',
              :'id' => :'id',
              :'category' => :'category',
              :'sub_category' => :'subCategory',
              :'message' => :'message',
              :'errors' => :'errors',
              :'context' => :'context',
              :'links' => :'links'
            }
          end

          # Attribute type mapping.
          def self.openapi_types
            {
              :'status' => :'String',
              :'id' => :'String',
              :'category' => :'ErrorCategory',
              :'sub_category' => :'Object',
              :'message' => :'String',
              :'errors' => :'Array<ErrorDetail>',
              :'context' => :'Hash<String, Array<String>>',
              :'links' => :'Hash<String, String>'
            }
          end

          # List of attributes with nullable: true
          def self.openapi_nullable
            Set.new([
            ])
          end

          # Initializes the object
          # @param [Hash] attributes Model attributes in the form of hash
          def initialize(attributes = {})
            if (!attributes.is_a?(Hash))
              fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::Crm::Objects::Tasks::StandardError` initialize method"
            end

            # check to see if the attribute exists and convert string to symbol for hash key
            attributes = attributes.each_with_object({}) { |(k, v), h|
              if (!self.class.attribute_map.key?(k.to_sym))
                fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::Crm::Objects::Tasks::StandardError`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
              end
              h[k.to_sym] = v
            }

            if attributes.key?(:'status')
              self.status = attributes[:'status']
            end

            if attributes.key?(:'id')
              self.id = attributes[:'id']
            end

            if attributes.key?(:'category')
              self.category = attributes[:'category']
            end

            if attributes.key?(:'sub_category')
              self.sub_category = attributes[:'sub_category']
            end

            if attributes.key?(:'message')
              self.message = attributes[:'message']
            end

            if attributes.key?(:'errors')
              if (value = attributes[:'errors']).is_a?(Array)
                self.errors = value
              end
            end

            if attributes.key?(:'context')
              if (value = attributes[:'context']).is_a?(Hash)
                self.context = value
              end
            end

            if attributes.key?(:'links')
              if (value = attributes[:'links']).is_a?(Hash)
                self.links = value
              end
            end
          end

          # Show invalid properties with the reasons. Usually used together with valid?
          # @return Array for valid properties with the reasons
          def list_invalid_properties
            invalid_properties = Array.new
            if @status.nil?
              invalid_properties.push('invalid value for "status", status cannot be nil.')
            end

            if @category.nil?
              invalid_properties.push('invalid value for "category", category cannot be nil.')
            end

            if @message.nil?
              invalid_properties.push('invalid value for "message", message cannot be nil.')
            end

            if @errors.nil?
              invalid_properties.push('invalid value for "errors", errors cannot be nil.')
            end

            if @context.nil?
              invalid_properties.push('invalid value for "context", context cannot be nil.')
            end

            if @links.nil?
              invalid_properties.push('invalid value for "links", links cannot be nil.')
            end

            invalid_properties
          end

          # Check to see if the all the properties in the model are valid
          # @return true if the model is valid
          def valid?
            return false if @status.nil?
            return false if @category.nil?
            return false if @message.nil?
            return false if @errors.nil?
            return false if @context.nil?
            return false if @links.nil?
            true
          end

          # Checks equality by comparing each attribute.
          # @param [Object] Object to be compared
          def ==(o)
            return true if self.equal?(o)
            self.class == o.class &&
                status == o.status &&
                id == o.id &&
                category == o.category &&
                sub_category == o.sub_category &&
                message == o.message &&
                errors == o.errors &&
                context == o.context &&
                links == o.links
          end

          # @see the `==` method
          # @param [Object] Object to be compared
          def eql?(o)
            self == o
          end

          # Calculates hash code according to all attributes.
          # @return [Integer] Hash code
          def hash
            [status, id, category, sub_category, message, errors, context, links].hash
          end

          # Builds the object from hash
          # @param [Hash] attributes Model attributes in the form of hash
          # @return [Object] Returns the model itself
          def self.build_from_hash(attributes)
            new.build_from_hash(attributes)
          end

          # Builds the object from hash
          # @param [Hash] attributes Model attributes in the form of hash
          # @return [Object] Returns the model itself
          def build_from_hash(attributes)
            return nil unless attributes.is_a?(Hash)
            self.class.openapi_types.each_pair do |key, type|
              if type =~ /\AArray<(.*)>/i
                # check to ensure the input is an array given that the attribute
                # is documented as an array but the input is not
                if attributes[self.class.attribute_map[key]].is_a?(Array)
                  self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
                end
              elsif !attributes[self.class.attribute_map[key]].nil?
                self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
              end # or else data not found in attributes(hash), not an issue as the data can be optional
            end

            self
          end

          # Deserializes the data based on type
          # @param string type Data type
          # @param string value Value to be deserialized
          # @return [Object] Deserialized data
          def _deserialize(type, value)
            case type.to_sym
            when :DateTime
              DateTime.parse(value)
            when :Date
              Date.parse(value)
            when :String
              value.to_s
            when :Integer
              value.to_i
            when :Float
              value.to_f
            when :Boolean
              if value.to_s =~ /\A(true|t|yes|y|1)\z/i
                true
              else
                false
              end
            when :Object
              # generic object (usually a Hash), return directly
              value
            when /\AArray<(?<inner_type>.+)>\z/
              inner_type = Regexp.last_match[:inner_type]
              value.map { |v| _deserialize(inner_type, v) }
            when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
              k_type = Regexp.last_match[:k_type]
              v_type = Regexp.last_match[:v_type]
              {}.tap do |hash|
                value.each do |k, v|
                  hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
                end
              end
            else # model
              Hubspot::Crm::Objects::Tasks.const_get(type).build_from_hash(value)
            end
          end

          # Returns the string representation of the object
          # @return [String] String presentation of the object
          def to_s
            to_hash.to_s
          end

          # to_body is an alias to to_hash (backward compatibility)
          # @return [Hash] Returns the object in the form of hash
          def to_body
            to_hash
          end

          # Returns the object in the form of hash
          # @return [Hash] Returns the object in the form of hash
          def to_hash
            hash = {}
            self.class.attribute_map.each_pair do |attr, param|
              value = self.send(attr)
              if value.nil?
                is_nullable = self.class.openapi_nullable.include?(attr)
                next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
              end
              
              hash[param] = _to_hash(value)
            end
            hash
          end

          # Outputs non-array value in the form of hash
          # For object, use to_hash. Otherwise, just return the value
          # @param [Object] value Any valid value
          # @return [Hash] Returns the value in the form of hash
          def _to_hash(value)
            if value.is_a?(Array)
              value.compact.map { |v| _to_hash(v) }
            elsif value.is_a?(Hash)
              {}.tap do |hash|
                value.each { |k, v| hash[k] = _to_hash(v) }
              end
            elsif value.respond_to? :to_hash
              value.to_hash
            else
              value
            end
          end
        end
      end
    end
  end
end
