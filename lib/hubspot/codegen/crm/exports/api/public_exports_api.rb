=begin
#CRM Exports

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module Hubspot
  module Crm
    module Exports
      class PublicExportsApi
        attr_accessor :api_client

        def initialize(api_client = ApiClient.default)
          @api_client = api_client
        end
        # Get the status of the export including the URL to download the file
        # Returns the status of the export with taskId, including the URL of the resulting file if the export status is COMPLETE
        # @param task_id [Integer] 
        # @param [Hash] opts the optional parameters
        # @return [ActionResponseWithSingleResultURI]
        def get_status(task_id, opts = {})
          data, _status_code, _headers = get_status_with_http_info(task_id, opts)
          data
        end

        # Get the status of the export including the URL to download the file
        # Returns the status of the export with taskId, including the URL of the resulting file if the export status is COMPLETE
        # @param task_id [Integer] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(ActionResponseWithSingleResultURI, Integer, Hash)>] ActionResponseWithSingleResultURI data, response status code and response headers
        def get_status_with_http_info(task_id, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: PublicExportsApi.get_status ...'
          end
          # verify the required parameter 'task_id' is set
          if @api_client.config.client_side_validation && task_id.nil?
            fail ArgumentError, "Missing the required parameter 'task_id' when calling PublicExportsApi.get_status"
          end
          # resource path
          local_var_path = '/crm/v3/exports/export/async/tasks/{taskId}/status'.sub('{' + 'taskId' + '}', CGI.escape(task_id.to_s))

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body]

          # return_type
          return_type = opts[:debug_return_type] || 'ActionResponseWithSingleResultURI'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"PublicExportsApi.get_status",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: PublicExportsApi#get_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Start an export
        # Begins exporting CRM data for the portal as specified in the request body
        # @param public_export_request [PublicExportRequest] 
        # @param [Hash] opts the optional parameters
        # @return [TaskLocator]
        def start(public_export_request, opts = {})
          data, _status_code, _headers = start_with_http_info(public_export_request, opts)
          data
        end

        # Start an export
        # Begins exporting CRM data for the portal as specified in the request body
        # @param public_export_request [PublicExportRequest] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(TaskLocator, Integer, Hash)>] TaskLocator data, response status code and response headers
        def start_with_http_info(public_export_request, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: PublicExportsApi.start ...'
          end
          # verify the required parameter 'public_export_request' is set
          if @api_client.config.client_side_validation && public_export_request.nil?
            fail ArgumentError, "Missing the required parameter 'public_export_request' when calling PublicExportsApi.start"
          end
          # resource path
          local_var_path = '/crm/v3/exports/export/async'

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(public_export_request)

          # return_type
          return_type = opts[:debug_return_type] || 'TaskLocator'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"PublicExportsApi.start",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: PublicExportsApi#start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end
      end
    end
  end
end
