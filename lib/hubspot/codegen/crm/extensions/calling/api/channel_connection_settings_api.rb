=begin
#CRM Calling Extensions

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module Hubspot
  module Crm
    module Extensions
      module Calling
        class ChannelConnectionSettingsApi
          attr_accessor :api_client

          def initialize(api_client = ApiClient.default)
            @api_client = api_client
          end
          # Delete channel connection settings
          # Delete the [channel connection settings](https://developers.hubspot.com/docs/guides/api/crm/extensions/third-party-calling#delete-existing-channel-connection-settings) for the app.
          # @param app_id [Integer] The ID of the app.
          # @param [Hash] opts the optional parameters
          # @return [nil]
          def archive(app_id, opts = {})
            archive_with_http_info(app_id, opts)
            nil
          end

          # Delete channel connection settings
          # Delete the [channel connection settings](https://developers.hubspot.com/docs/guides/api/crm/extensions/third-party-calling#delete-existing-channel-connection-settings) for the app.
          # @param app_id [Integer] The ID of the app.
          # @param [Hash] opts the optional parameters
          # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
          def archive_with_http_info(app_id, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: ChannelConnectionSettingsApi.archive ...'
            end
            # verify the required parameter 'app_id' is set
            if @api_client.config.client_side_validation && app_id.nil?
              fail ArgumentError, "Missing the required parameter 'app_id' when calling ChannelConnectionSettingsApi.archive"
            end
            # resource path
            local_var_path = '/crm/v3/extensions/calling/{appId}/settings/channel-connection'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['*/*'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:debug_body]

            # return_type
            return_type = opts[:debug_return_type]

            # auth_names
            auth_names = opts[:debug_auth_names] || ['developer_hapikey']

            new_options = opts.merge(
              :operation => :"ChannelConnectionSettingsApi.archive",
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: ChannelConnectionSettingsApi#archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Configure channel connection settings
          # Configure [channel connection settings](https://developers.hubspot.com/docs/guides/api/crm/extensions/third-party-calling#create-channel-connection-settings) for the app. 
          # @param app_id [Integer] The ID of the app.
          # @param channel_connection_settings_request [ChannelConnectionSettingsRequest] 
          # @param [Hash] opts the optional parameters
          # @return [ChannelConnectionSettingsResponse]
          def create(app_id, channel_connection_settings_request, opts = {})
            data, _status_code, _headers = create_with_http_info(app_id, channel_connection_settings_request, opts)
            data
          end

          # Configure channel connection settings
          # Configure [channel connection settings](https://developers.hubspot.com/docs/guides/api/crm/extensions/third-party-calling#create-channel-connection-settings) for the app. 
          # @param app_id [Integer] The ID of the app.
          # @param channel_connection_settings_request [ChannelConnectionSettingsRequest] 
          # @param [Hash] opts the optional parameters
          # @return [Array<(ChannelConnectionSettingsResponse, Integer, Hash)>] ChannelConnectionSettingsResponse data, response status code and response headers
          def create_with_http_info(app_id, channel_connection_settings_request, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: ChannelConnectionSettingsApi.create ...'
            end
            # verify the required parameter 'app_id' is set
            if @api_client.config.client_side_validation && app_id.nil?
              fail ArgumentError, "Missing the required parameter 'app_id' when calling ChannelConnectionSettingsApi.create"
            end
            # verify the required parameter 'channel_connection_settings_request' is set
            if @api_client.config.client_side_validation && channel_connection_settings_request.nil?
              fail ArgumentError, "Missing the required parameter 'channel_connection_settings_request' when calling ChannelConnectionSettingsApi.create"
            end
            # resource path
            local_var_path = '/crm/v3/extensions/calling/{appId}/settings/channel-connection'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            content_type = @api_client.select_header_content_type(['application/json'])
            if !content_type.nil?
                header_params['Content-Type'] = content_type
            end

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:debug_body] || @api_client.object_to_http_body(channel_connection_settings_request)

            # return_type
            return_type = opts[:debug_return_type] || 'ChannelConnectionSettingsResponse'

            # auth_names
            auth_names = opts[:debug_auth_names] || ['developer_hapikey']

            new_options = opts.merge(
              :operation => :"ChannelConnectionSettingsApi.create",
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: ChannelConnectionSettingsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Retrieve channel connection settings
          # Retrieve the settings related to the app's [channel connection](https://developers.hubspot.com/docs/guides/api/crm/extensions/third-party-calling#fetch-existing-channel-connection-settings).
          # @param app_id [Integer] The ID of the app.
          # @param [Hash] opts the optional parameters
          # @return [ChannelConnectionSettingsResponse]
          def get_by_id(app_id, opts = {})
            data, _status_code, _headers = get_by_id_with_http_info(app_id, opts)
            data
          end

          # Retrieve channel connection settings
          # Retrieve the settings related to the app&#39;s [channel connection](https://developers.hubspot.com/docs/guides/api/crm/extensions/third-party-calling#fetch-existing-channel-connection-settings).
          # @param app_id [Integer] The ID of the app.
          # @param [Hash] opts the optional parameters
          # @return [Array<(ChannelConnectionSettingsResponse, Integer, Hash)>] ChannelConnectionSettingsResponse data, response status code and response headers
          def get_by_id_with_http_info(app_id, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: ChannelConnectionSettingsApi.get_by_id ...'
            end
            # verify the required parameter 'app_id' is set
            if @api_client.config.client_side_validation && app_id.nil?
              fail ArgumentError, "Missing the required parameter 'app_id' when calling ChannelConnectionSettingsApi.get_by_id"
            end
            # resource path
            local_var_path = '/crm/v3/extensions/calling/{appId}/settings/channel-connection'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:debug_body]

            # return_type
            return_type = opts[:debug_return_type] || 'ChannelConnectionSettingsResponse'

            # auth_names
            auth_names = opts[:debug_auth_names] || ['developer_hapikey']

            new_options = opts.merge(
              :operation => :"ChannelConnectionSettingsApi.get_by_id",
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: ChannelConnectionSettingsApi#get_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Update channel connection settings
          # Update existing [channel connection settings](https://developers.hubspot.com/docs/guides/api/crm/extensions/third-party-calling#manage-the-webhook-settings-for-channel-connection) for your app.
          # @param app_id [Integer] The ID of the app.
          # @param channel_connection_settings_patch_request [ChannelConnectionSettingsPatchRequest] 
          # @param [Hash] opts the optional parameters
          # @return [ChannelConnectionSettingsResponse]
          def update(app_id, channel_connection_settings_patch_request, opts = {})
            data, _status_code, _headers = update_with_http_info(app_id, channel_connection_settings_patch_request, opts)
            data
          end

          # Update channel connection settings
          # Update existing [channel connection settings](https://developers.hubspot.com/docs/guides/api/crm/extensions/third-party-calling#manage-the-webhook-settings-for-channel-connection) for your app.
          # @param app_id [Integer] The ID of the app.
          # @param channel_connection_settings_patch_request [ChannelConnectionSettingsPatchRequest] 
          # @param [Hash] opts the optional parameters
          # @return [Array<(ChannelConnectionSettingsResponse, Integer, Hash)>] ChannelConnectionSettingsResponse data, response status code and response headers
          def update_with_http_info(app_id, channel_connection_settings_patch_request, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: ChannelConnectionSettingsApi.update ...'
            end
            # verify the required parameter 'app_id' is set
            if @api_client.config.client_side_validation && app_id.nil?
              fail ArgumentError, "Missing the required parameter 'app_id' when calling ChannelConnectionSettingsApi.update"
            end
            # verify the required parameter 'channel_connection_settings_patch_request' is set
            if @api_client.config.client_side_validation && channel_connection_settings_patch_request.nil?
              fail ArgumentError, "Missing the required parameter 'channel_connection_settings_patch_request' when calling ChannelConnectionSettingsApi.update"
            end
            # resource path
            local_var_path = '/crm/v3/extensions/calling/{appId}/settings/channel-connection'.sub('{' + 'appId' + '}', CGI.escape(app_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            content_type = @api_client.select_header_content_type(['application/json'])
            if !content_type.nil?
                header_params['Content-Type'] = content_type
            end

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:debug_body] || @api_client.object_to_http_body(channel_connection_settings_patch_request)

            # return_type
            return_type = opts[:debug_return_type] || 'ChannelConnectionSettingsResponse'

            # auth_names
            auth_names = opts[:debug_auth_names] || ['developer_hapikey']

            new_options = opts.merge(
              :operation => :"ChannelConnectionSettingsApi.update",
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: ChannelConnectionSettingsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end
        end
      end
    end
  end
end
