=begin
#Accounting Extension

#These APIs allow you to interact with HubSpot's Accounting Extension. It allows you to: * Specify the URLs that HubSpot will use when making webhook requests to your external accounting system. * Respond to webhook calls made to your external accounting system by HubSpot 

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Hubspot
  module Crm
    module Extensions
      module Accounting
        class AccountingExtensionInvoice
          # The total amount due.
          attr_accessor :amount_due

          # The remaining outstanding balance due.
          attr_accessor :balance

          # The due date for payment of the invoice, in ISO-8601 date format (yyyy-MM-dd)
          attr_accessor :due_date

          # The invoice number
          attr_accessor :invoice_number

          # The ID of the customer that this invoice is for.
          attr_accessor :customer_id

          # The ISO 4217 currency code that represents the currency of this invoice.
          attr_accessor :currency

          # A link to the invoice in the external accounting system.
          attr_accessor :invoice_link

          # The name of the customer that this invoice is for.
          attr_accessor :customer_name

          # The currency status of the invoice.
          attr_accessor :status

          class EnumAttributeValidator
            attr_reader :datatype
            attr_reader :allowable_values

            def initialize(datatype, allowable_values)
              @allowable_values = allowable_values.map do |value|
                case datatype.to_s
                when /Integer/i
                  value.to_i
                when /Float/i
                  value.to_f
                else
                  value
                end
              end
            end

            def valid?(value)
              !value || allowable_values.include?(value)
            end
          end

          # Attribute mapping from ruby-style variable name to JSON key.
          def self.attribute_map
            {
              :'amount_due' => :'amountDue',
              :'balance' => :'balance',
              :'due_date' => :'dueDate',
              :'invoice_number' => :'invoiceNumber',
              :'customer_id' => :'customerId',
              :'currency' => :'currency',
              :'invoice_link' => :'invoiceLink',
              :'customer_name' => :'customerName',
              :'status' => :'status'
            }
          end

          # Returns all the JSON keys this model knows about
          def self.acceptable_attributes
            attribute_map.values
          end

          # Attribute type mapping.
          def self.openapi_types
            {
              :'amount_due' => :'Float',
              :'balance' => :'Float',
              :'due_date' => :'Date',
              :'invoice_number' => :'String',
              :'customer_id' => :'String',
              :'currency' => :'String',
              :'invoice_link' => :'String',
              :'customer_name' => :'String',
              :'status' => :'String'
            }
          end

          # List of attributes with nullable: true
          def self.openapi_nullable
            Set.new([
            ])
          end

          # Initializes the object
          # @param [Hash] attributes Model attributes in the form of hash
          def initialize(attributes = {})
            if (!attributes.is_a?(Hash))
              fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::Crm::Extensions::Accounting::AccountingExtensionInvoice` initialize method"
            end

            # check to see if the attribute exists and convert string to symbol for hash key
            attributes = attributes.each_with_object({}) { |(k, v), h|
              if (!self.class.attribute_map.key?(k.to_sym))
                fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::Crm::Extensions::Accounting::AccountingExtensionInvoice`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
              end
              h[k.to_sym] = v
            }

            if attributes.key?(:'amount_due')
              self.amount_due = attributes[:'amount_due']
            end

            if attributes.key?(:'balance')
              self.balance = attributes[:'balance']
            end

            if attributes.key?(:'due_date')
              self.due_date = attributes[:'due_date']
            end

            if attributes.key?(:'invoice_number')
              self.invoice_number = attributes[:'invoice_number']
            end

            if attributes.key?(:'customer_id')
              self.customer_id = attributes[:'customer_id']
            end

            if attributes.key?(:'currency')
              self.currency = attributes[:'currency']
            end

            if attributes.key?(:'invoice_link')
              self.invoice_link = attributes[:'invoice_link']
            end

            if attributes.key?(:'customer_name')
              self.customer_name = attributes[:'customer_name']
            end

            if attributes.key?(:'status')
              self.status = attributes[:'status']
            end
          end

          # Show invalid properties with the reasons. Usually used together with valid?
          # @return Array for valid properties with the reasons
          def list_invalid_properties
            invalid_properties = Array.new
            if @amount_due.nil?
              invalid_properties.push('invalid value for "amount_due", amount_due cannot be nil.')
            end

            if @due_date.nil?
              invalid_properties.push('invalid value for "due_date", due_date cannot be nil.')
            end

            if @currency.nil?
              invalid_properties.push('invalid value for "currency", currency cannot be nil.')
            end

            if @invoice_link.nil?
              invalid_properties.push('invalid value for "invoice_link", invoice_link cannot be nil.')
            end

            if @customer_name.nil?
              invalid_properties.push('invalid value for "customer_name", customer_name cannot be nil.')
            end

            if @status.nil?
              invalid_properties.push('invalid value for "status", status cannot be nil.')
            end

            invalid_properties
          end

          # Check to see if the all the properties in the model are valid
          # @return true if the model is valid
          def valid?
            return false if @amount_due.nil?
            return false if @due_date.nil?
            return false if @currency.nil?
            return false if @invoice_link.nil?
            return false if @customer_name.nil?
            return false if @status.nil?
            status_validator = EnumAttributeValidator.new('String', ["CREATED", "SENT", "PAID", "CLOSED", "OVERDUE", "VOIDED"])
            return false unless status_validator.valid?(@status)
            true
          end

          # Custom attribute writer method checking allowed values (enum).
          # @param [Object] status Object to be assigned
          def status=(status)
            validator = EnumAttributeValidator.new('String', ["CREATED", "SENT", "PAID", "CLOSED", "OVERDUE", "VOIDED"])
            unless validator.valid?(status)
              fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
            end
            @status = status
          end

          # Checks equality by comparing each attribute.
          # @param [Object] Object to be compared
          def ==(o)
            return true if self.equal?(o)
            self.class == o.class &&
                amount_due == o.amount_due &&
                balance == o.balance &&
                due_date == o.due_date &&
                invoice_number == o.invoice_number &&
                customer_id == o.customer_id &&
                currency == o.currency &&
                invoice_link == o.invoice_link &&
                customer_name == o.customer_name &&
                status == o.status
          end

          # @see the `==` method
          # @param [Object] Object to be compared
          def eql?(o)
            self == o
          end

          # Calculates hash code according to all attributes.
          # @return [Integer] Hash code
          def hash
            [amount_due, balance, due_date, invoice_number, customer_id, currency, invoice_link, customer_name, status].hash
          end

          # Builds the object from hash
          # @param [Hash] attributes Model attributes in the form of hash
          # @return [Object] Returns the model itself
          def self.build_from_hash(attributes)
            new.build_from_hash(attributes)
          end

          # Builds the object from hash
          # @param [Hash] attributes Model attributes in the form of hash
          # @return [Object] Returns the model itself
          def build_from_hash(attributes)
            return nil unless attributes.is_a?(Hash)
            attributes = attributes.transform_keys(&:to_sym)
            self.class.openapi_types.each_pair do |key, type|
              if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
                self.send("#{key}=", nil)
              elsif type =~ /\AArray<(.*)>/i
                # check to ensure the input is an array given that the attribute
                # is documented as an array but the input is not
                if attributes[self.class.attribute_map[key]].is_a?(Array)
                  self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
                end
              elsif !attributes[self.class.attribute_map[key]].nil?
                self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
              end
            end

            self
          end

          # Deserializes the data based on type
          # @param string type Data type
          # @param string value Value to be deserialized
          # @return [Object] Deserialized data
          def _deserialize(type, value)
            case type.to_sym
            when :Time
              Time.parse(value)
            when :Date
              Date.parse(value)
            when :String
              value.to_s
            when :Integer
              value.to_i
            when :Float
              value.to_f
            when :Boolean
              if value.to_s =~ /\A(true|t|yes|y|1)\z/i
                true
              else
                false
              end
            when :Object
              # generic object (usually a Hash), return directly
              value
            when /\AArray<(?<inner_type>.+)>\z/
              inner_type = Regexp.last_match[:inner_type]
              value.map { |v| _deserialize(inner_type, v) }
            when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
              k_type = Regexp.last_match[:k_type]
              v_type = Regexp.last_match[:v_type]
              {}.tap do |hash|
                value.each do |k, v|
                  hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
                end
              end
            else # model
              # models (e.g. Pet) or oneOf
              klass = Hubspot::Crm::Extensions::Accounting.const_get(type)
              klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
            end
          end

          # Returns the string representation of the object
          # @return [String] String presentation of the object
          def to_s
            to_hash.to_s
          end

          # to_body is an alias to to_hash (backward compatibility)
          # @return [Hash] Returns the object in the form of hash
          def to_body
            to_hash
          end

          # Returns the object in the form of hash
          # @return [Hash] Returns the object in the form of hash
          def to_hash
            hash = {}
            self.class.attribute_map.each_pair do |attr, param|
              value = self.send(attr)
              if value.nil?
                is_nullable = self.class.openapi_nullable.include?(attr)
                next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
              end

              hash[param] = _to_hash(value)
            end
            hash
          end

          # Outputs non-array value in the form of hash
          # For object, use to_hash. Otherwise, just return the value
          # @param [Object] value Any valid value
          # @return [Hash] Returns the value in the form of hash
          def _to_hash(value)
            if value.is_a?(Array)
              value.compact.map { |v| _to_hash(v) }
            elsif value.is_a?(Hash)
              {}.tap do |hash|
                value.each { |k, v| hash[k] = _to_hash(v) }
              end
            elsif value.respond_to? :to_hash
              value.to_hash
            else
              value
            end
          end

        end

      end
    end
  end
end
