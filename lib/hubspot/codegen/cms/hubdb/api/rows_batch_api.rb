=begin
#Hubdb

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module Hubspot
  module Cms
    module Hubdb
      class RowsBatchApi
        attr_accessor :api_client

        def initialize(api_client = ApiClient.default)
          @api_client = api_client
        end
        # Clone rows in batch
        # Clones rows in the draft version of the specified table, given a set of row ids. Maximum of 100 row ids per call.
        # @param table_id_or_name [String] The ID or name of the table
        # @param batch_input_hub_db_table_row_batch_clone_request [BatchInputHubDbTableRowBatchCloneRequest] 
        # @param [Hash] opts the optional parameters
        # @return [BatchResponseHubDbTableRowV3]
        def clone_draft_table_rows(table_id_or_name, batch_input_hub_db_table_row_batch_clone_request, opts = {})
          data, _status_code, _headers = clone_draft_table_rows_with_http_info(table_id_or_name, batch_input_hub_db_table_row_batch_clone_request, opts)
          data
        end

        # Clone rows in batch
        # Clones rows in the draft version of the specified table, given a set of row ids. Maximum of 100 row ids per call.
        # @param table_id_or_name [String] The ID or name of the table
        # @param batch_input_hub_db_table_row_batch_clone_request [BatchInputHubDbTableRowBatchCloneRequest] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(BatchResponseHubDbTableRowV3, Integer, Hash)>] BatchResponseHubDbTableRowV3 data, response status code and response headers
        def clone_draft_table_rows_with_http_info(table_id_or_name, batch_input_hub_db_table_row_batch_clone_request, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: RowsBatchApi.clone_draft_table_rows ...'
          end
          # verify the required parameter 'table_id_or_name' is set
          if @api_client.config.client_side_validation && table_id_or_name.nil?
            fail ArgumentError, "Missing the required parameter 'table_id_or_name' when calling RowsBatchApi.clone_draft_table_rows"
          end
          # verify the required parameter 'batch_input_hub_db_table_row_batch_clone_request' is set
          if @api_client.config.client_side_validation && batch_input_hub_db_table_row_batch_clone_request.nil?
            fail ArgumentError, "Missing the required parameter 'batch_input_hub_db_table_row_batch_clone_request' when calling RowsBatchApi.clone_draft_table_rows"
          end
          # resource path
          local_var_path = '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/clone'.sub('{' + 'tableIdOrName' + '}', CGI.escape(table_id_or_name.to_s))

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_hub_db_table_row_batch_clone_request)

          # return_type
          return_type = opts[:debug_return_type] || 'BatchResponseHubDbTableRowV3'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"RowsBatchApi.clone_draft_table_rows",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: RowsBatchApi#clone_draft_table_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Create rows in batch
        # Creates rows in the draft version of the specified table, given an array of row objects. Maximum of 100 row object per call. See the overview section for more details with an example.
        # @param table_id_or_name [String] The ID or name of the table
        # @param batch_input_hub_db_table_row_v3_request [BatchInputHubDbTableRowV3Request] 
        # @param [Hash] opts the optional parameters
        # @return [BatchResponseHubDbTableRowV3]
        def create_draft_table_rows(table_id_or_name, batch_input_hub_db_table_row_v3_request, opts = {})
          data, _status_code, _headers = create_draft_table_rows_with_http_info(table_id_or_name, batch_input_hub_db_table_row_v3_request, opts)
          data
        end

        # Create rows in batch
        # Creates rows in the draft version of the specified table, given an array of row objects. Maximum of 100 row object per call. See the overview section for more details with an example.
        # @param table_id_or_name [String] The ID or name of the table
        # @param batch_input_hub_db_table_row_v3_request [BatchInputHubDbTableRowV3Request] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(BatchResponseHubDbTableRowV3, Integer, Hash)>] BatchResponseHubDbTableRowV3 data, response status code and response headers
        def create_draft_table_rows_with_http_info(table_id_or_name, batch_input_hub_db_table_row_v3_request, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: RowsBatchApi.create_draft_table_rows ...'
          end
          # verify the required parameter 'table_id_or_name' is set
          if @api_client.config.client_side_validation && table_id_or_name.nil?
            fail ArgumentError, "Missing the required parameter 'table_id_or_name' when calling RowsBatchApi.create_draft_table_rows"
          end
          # verify the required parameter 'batch_input_hub_db_table_row_v3_request' is set
          if @api_client.config.client_side_validation && batch_input_hub_db_table_row_v3_request.nil?
            fail ArgumentError, "Missing the required parameter 'batch_input_hub_db_table_row_v3_request' when calling RowsBatchApi.create_draft_table_rows"
          end
          # resource path
          local_var_path = '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/create'.sub('{' + 'tableIdOrName' + '}', CGI.escape(table_id_or_name.to_s))

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_hub_db_table_row_v3_request)

          # return_type
          return_type = opts[:debug_return_type] || 'BatchResponseHubDbTableRowV3'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"RowsBatchApi.create_draft_table_rows",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: RowsBatchApi#create_draft_table_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Permanently deletes rows
        # Permanently deletes rows from the draft version of the table, given a set of row IDs. Maximum of 100 row IDs per call.
        # @param table_id_or_name [String] The ID or name of the table
        # @param batch_input_string [BatchInputString] 
        # @param [Hash] opts the optional parameters
        # @return [nil]
        def purge_draft_table_rows(table_id_or_name, batch_input_string, opts = {})
          purge_draft_table_rows_with_http_info(table_id_or_name, batch_input_string, opts)
          nil
        end

        # Permanently deletes rows
        # Permanently deletes rows from the draft version of the table, given a set of row IDs. Maximum of 100 row IDs per call.
        # @param table_id_or_name [String] The ID or name of the table
        # @param batch_input_string [BatchInputString] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
        def purge_draft_table_rows_with_http_info(table_id_or_name, batch_input_string, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: RowsBatchApi.purge_draft_table_rows ...'
          end
          # verify the required parameter 'table_id_or_name' is set
          if @api_client.config.client_side_validation && table_id_or_name.nil?
            fail ArgumentError, "Missing the required parameter 'table_id_or_name' when calling RowsBatchApi.purge_draft_table_rows"
          end
          # verify the required parameter 'batch_input_string' is set
          if @api_client.config.client_side_validation && batch_input_string.nil?
            fail ArgumentError, "Missing the required parameter 'batch_input_string' when calling RowsBatchApi.purge_draft_table_rows"
          end
          # resource path
          local_var_path = '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/purge'.sub('{' + 'tableIdOrName' + '}', CGI.escape(table_id_or_name.to_s))

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_string)

          # return_type
          return_type = opts[:debug_return_type]

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"RowsBatchApi.purge_draft_table_rows",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: RowsBatchApi#purge_draft_table_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Get a set of rows from draft table
        # Returns rows in the draft version of the specified table, given a set of row IDs.
        # @param table_id_or_name [String] The ID or name of the table
        # @param batch_input_string [BatchInputString] 
        # @param [Hash] opts the optional parameters
        # @return [BatchResponseHubDbTableRowV3]
        def read_draft_table_rows(table_id_or_name, batch_input_string, opts = {})
          data, _status_code, _headers = read_draft_table_rows_with_http_info(table_id_or_name, batch_input_string, opts)
          data
        end

        # Get a set of rows from draft table
        # Returns rows in the draft version of the specified table, given a set of row IDs.
        # @param table_id_or_name [String] The ID or name of the table
        # @param batch_input_string [BatchInputString] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(BatchResponseHubDbTableRowV3, Integer, Hash)>] BatchResponseHubDbTableRowV3 data, response status code and response headers
        def read_draft_table_rows_with_http_info(table_id_or_name, batch_input_string, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: RowsBatchApi.read_draft_table_rows ...'
          end
          # verify the required parameter 'table_id_or_name' is set
          if @api_client.config.client_side_validation && table_id_or_name.nil?
            fail ArgumentError, "Missing the required parameter 'table_id_or_name' when calling RowsBatchApi.read_draft_table_rows"
          end
          # verify the required parameter 'batch_input_string' is set
          if @api_client.config.client_side_validation && batch_input_string.nil?
            fail ArgumentError, "Missing the required parameter 'batch_input_string' when calling RowsBatchApi.read_draft_table_rows"
          end
          # resource path
          local_var_path = '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/read'.sub('{' + 'tableIdOrName' + '}', CGI.escape(table_id_or_name.to_s))

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_string)

          # return_type
          return_type = opts[:debug_return_type] || 'BatchResponseHubDbTableRowV3'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"RowsBatchApi.read_draft_table_rows",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: RowsBatchApi#read_draft_table_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Get a set of rows
        # Returns rows in the published version of the specified table, given a set of row IDs. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        # @param table_id_or_name [String] The ID or name of the table to query.
        # @param batch_input_string [BatchInputString] 
        # @param [Hash] opts the optional parameters
        # @return [BatchResponseHubDbTableRowV3]
        def read_table_rows(table_id_or_name, batch_input_string, opts = {})
          data, _status_code, _headers = read_table_rows_with_http_info(table_id_or_name, batch_input_string, opts)
          data
        end

        # Get a set of rows
        # Returns rows in the published version of the specified table, given a set of row IDs. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        # @param table_id_or_name [String] The ID or name of the table to query.
        # @param batch_input_string [BatchInputString] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(BatchResponseHubDbTableRowV3, Integer, Hash)>] BatchResponseHubDbTableRowV3 data, response status code and response headers
        def read_table_rows_with_http_info(table_id_or_name, batch_input_string, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: RowsBatchApi.read_table_rows ...'
          end
          # verify the required parameter 'table_id_or_name' is set
          if @api_client.config.client_side_validation && table_id_or_name.nil?
            fail ArgumentError, "Missing the required parameter 'table_id_or_name' when calling RowsBatchApi.read_table_rows"
          end
          # verify the required parameter 'batch_input_string' is set
          if @api_client.config.client_side_validation && batch_input_string.nil?
            fail ArgumentError, "Missing the required parameter 'batch_input_string' when calling RowsBatchApi.read_table_rows"
          end
          # resource path
          local_var_path = '/cms/v3/hubdb/tables/{tableIdOrName}/rows/batch/read'.sub('{' + 'tableIdOrName' + '}', CGI.escape(table_id_or_name.to_s))

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_string)

          # return_type
          return_type = opts[:debug_return_type] || 'BatchResponseHubDbTableRowV3'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"RowsBatchApi.read_table_rows",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: RowsBatchApi#read_table_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Replace rows in batch in draft table
        # Replaces multiple rows as a batch in the draft version of the table, with a maximum of 100 rows per call. See the endpoint `PUT /tables/{tableIdOrName}/rows/{rowId}/draft` for details on updating a single row.
        # @param table_id_or_name [String] The ID or name of the table
        # @param batch_input_hub_db_table_row_v3_batch_update_request [BatchInputHubDbTableRowV3BatchUpdateRequest] 
        # @param [Hash] opts the optional parameters
        # @return [BatchResponseHubDbTableRowV3]
        def replace_draft_table_rows(table_id_or_name, batch_input_hub_db_table_row_v3_batch_update_request, opts = {})
          data, _status_code, _headers = replace_draft_table_rows_with_http_info(table_id_or_name, batch_input_hub_db_table_row_v3_batch_update_request, opts)
          data
        end

        # Replace rows in batch in draft table
        # Replaces multiple rows as a batch in the draft version of the table, with a maximum of 100 rows per call. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        # @param table_id_or_name [String] The ID or name of the table
        # @param batch_input_hub_db_table_row_v3_batch_update_request [BatchInputHubDbTableRowV3BatchUpdateRequest] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(BatchResponseHubDbTableRowV3, Integer, Hash)>] BatchResponseHubDbTableRowV3 data, response status code and response headers
        def replace_draft_table_rows_with_http_info(table_id_or_name, batch_input_hub_db_table_row_v3_batch_update_request, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: RowsBatchApi.replace_draft_table_rows ...'
          end
          # verify the required parameter 'table_id_or_name' is set
          if @api_client.config.client_side_validation && table_id_or_name.nil?
            fail ArgumentError, "Missing the required parameter 'table_id_or_name' when calling RowsBatchApi.replace_draft_table_rows"
          end
          # verify the required parameter 'batch_input_hub_db_table_row_v3_batch_update_request' is set
          if @api_client.config.client_side_validation && batch_input_hub_db_table_row_v3_batch_update_request.nil?
            fail ArgumentError, "Missing the required parameter 'batch_input_hub_db_table_row_v3_batch_update_request' when calling RowsBatchApi.replace_draft_table_rows"
          end
          # resource path
          local_var_path = '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/replace'.sub('{' + 'tableIdOrName' + '}', CGI.escape(table_id_or_name.to_s))

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_hub_db_table_row_v3_batch_update_request)

          # return_type
          return_type = opts[:debug_return_type] || 'BatchResponseHubDbTableRowV3'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"RowsBatchApi.replace_draft_table_rows",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: RowsBatchApi#replace_draft_table_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Update rows in batch in draft table
        # Updates multiple rows as a batch in the draft version of the table, with a maximum of 100 rows per call. See the endpoint `PATCH /tables/{tableIdOrName}/rows/{rowId}/draft` for details on updating a single row.
        # @param table_id_or_name [String] The ID or name of the table
        # @param batch_input_hub_db_table_row_v3_batch_update_request [BatchInputHubDbTableRowV3BatchUpdateRequest] 
        # @param [Hash] opts the optional parameters
        # @return [BatchResponseHubDbTableRowV3]
        def update_draft_table_rows(table_id_or_name, batch_input_hub_db_table_row_v3_batch_update_request, opts = {})
          data, _status_code, _headers = update_draft_table_rows_with_http_info(table_id_or_name, batch_input_hub_db_table_row_v3_batch_update_request, opts)
          data
        end

        # Update rows in batch in draft table
        # Updates multiple rows as a batch in the draft version of the table, with a maximum of 100 rows per call. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        # @param table_id_or_name [String] The ID or name of the table
        # @param batch_input_hub_db_table_row_v3_batch_update_request [BatchInputHubDbTableRowV3BatchUpdateRequest] 
        # @param [Hash] opts the optional parameters
        # @return [Array<(BatchResponseHubDbTableRowV3, Integer, Hash)>] BatchResponseHubDbTableRowV3 data, response status code and response headers
        def update_draft_table_rows_with_http_info(table_id_or_name, batch_input_hub_db_table_row_v3_batch_update_request, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: RowsBatchApi.update_draft_table_rows ...'
          end
          # verify the required parameter 'table_id_or_name' is set
          if @api_client.config.client_side_validation && table_id_or_name.nil?
            fail ArgumentError, "Missing the required parameter 'table_id_or_name' when calling RowsBatchApi.update_draft_table_rows"
          end
          # verify the required parameter 'batch_input_hub_db_table_row_v3_batch_update_request' is set
          if @api_client.config.client_side_validation && batch_input_hub_db_table_row_v3_batch_update_request.nil?
            fail ArgumentError, "Missing the required parameter 'batch_input_hub_db_table_row_v3_batch_update_request' when calling RowsBatchApi.update_draft_table_rows"
          end
          # resource path
          local_var_path = '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/update'.sub('{' + 'tableIdOrName' + '}', CGI.escape(table_id_or_name.to_s))

          # query parameters
          query_params = opts[:query_params] || {}

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
          # HTTP header 'Content-Type'
          content_type = @api_client.select_header_content_type(['application/json'])
          if !content_type.nil?
              header_params['Content-Type'] = content_type
          end

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_hub_db_table_row_v3_batch_update_request)

          # return_type
          return_type = opts[:debug_return_type] || 'BatchResponseHubDbTableRowV3'

          # auth_names
          auth_names = opts[:debug_auth_names] || ['oauth2']

          new_options = opts.merge(
            :operation => :"RowsBatchApi.update_draft_table_rows",
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: RowsBatchApi#update_draft_table_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end
      end
    end
  end
end
