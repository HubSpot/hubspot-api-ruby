=begin
#Hubdb

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Hubspot
  module Cms
    module Hubdb
      class Column
        attr_accessor :created_by_user_id

        # Foreign table id referenced
        attr_accessor :foreign_table_id

        attr_accessor :updated_by

        attr_accessor :description

        # Label of the column
        attr_accessor :label

        attr_accessor :updated_by_user_id

        # Type of the column
        attr_accessor :type

        # Number of options available
        attr_accessor :option_count

        # Foreign Ids
        attr_accessor :foreign_ids

        attr_accessor :created_at

        attr_accessor :deleted

        attr_accessor :created_by

        # Name of the column
        attr_accessor :name

        # Options to choose for select and multi-select columns
        attr_accessor :options

        # Column width for HubDB UI
        attr_accessor :width

        # Column Id
        attr_accessor :id

        # Foreign ids
        attr_accessor :foreign_ids_by_id

        # Foreign Column id
        attr_accessor :foreign_column_id

        # Foreign ids by name
        attr_accessor :foreign_ids_by_name

        attr_accessor :updated_at

        class EnumAttributeValidator
          attr_reader :datatype
          attr_reader :allowable_values

          def initialize(datatype, allowable_values)
            @allowable_values = allowable_values.map do |value|
              case datatype.to_s
              when /Integer/i
                value.to_i
              when /Float/i
                value.to_f
              else
                value
              end
            end
          end

          def valid?(value)
            !value || allowable_values.include?(value)
          end
        end

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            :'created_by_user_id' => :'createdByUserId',
            :'foreign_table_id' => :'foreignTableId',
            :'updated_by' => :'updatedBy',
            :'description' => :'description',
            :'label' => :'label',
            :'updated_by_user_id' => :'updatedByUserId',
            :'type' => :'type',
            :'option_count' => :'optionCount',
            :'foreign_ids' => :'foreignIds',
            :'created_at' => :'createdAt',
            :'deleted' => :'deleted',
            :'created_by' => :'createdBy',
            :'name' => :'name',
            :'options' => :'options',
            :'width' => :'width',
            :'id' => :'id',
            :'foreign_ids_by_id' => :'foreignIdsById',
            :'foreign_column_id' => :'foreignColumnId',
            :'foreign_ids_by_name' => :'foreignIdsByName',
            :'updated_at' => :'updatedAt'
          }
        end

        # Returns all the JSON keys this model knows about
        def self.acceptable_attributes
          attribute_map.values
        end

        # Attribute type mapping.
        def self.openapi_types
          {
            :'created_by_user_id' => :'Integer',
            :'foreign_table_id' => :'Integer',
            :'updated_by' => :'SimpleUser',
            :'description' => :'String',
            :'label' => :'String',
            :'updated_by_user_id' => :'Integer',
            :'type' => :'String',
            :'option_count' => :'Integer',
            :'foreign_ids' => :'Array<ForeignId>',
            :'created_at' => :'Time',
            :'deleted' => :'Boolean',
            :'created_by' => :'SimpleUser',
            :'name' => :'String',
            :'options' => :'Array<Option>',
            :'width' => :'Integer',
            :'id' => :'String',
            :'foreign_ids_by_id' => :'Hash<String, ForeignId>',
            :'foreign_column_id' => :'Integer',
            :'foreign_ids_by_name' => :'Hash<String, ForeignId>',
            :'updated_at' => :'Time'
          }
        end

        # List of attributes with nullable: true
        def self.openapi_nullable
          Set.new([
          ])
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          if (!attributes.is_a?(Hash))
            fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::Cms::Hubdb::Column` initialize method"
          end

          # check to see if the attribute exists and convert string to symbol for hash key
          attributes = attributes.each_with_object({}) { |(k, v), h|
            if (!self.class.attribute_map.key?(k.to_sym))
              fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::Cms::Hubdb::Column`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
            end
            h[k.to_sym] = v
          }

          if attributes.key?(:'created_by_user_id')
            self.created_by_user_id = attributes[:'created_by_user_id']
          end

          if attributes.key?(:'foreign_table_id')
            self.foreign_table_id = attributes[:'foreign_table_id']
          end

          if attributes.key?(:'updated_by')
            self.updated_by = attributes[:'updated_by']
          end

          if attributes.key?(:'description')
            self.description = attributes[:'description']
          end

          if attributes.key?(:'label')
            self.label = attributes[:'label']
          end

          if attributes.key?(:'updated_by_user_id')
            self.updated_by_user_id = attributes[:'updated_by_user_id']
          end

          if attributes.key?(:'type')
            self.type = attributes[:'type']
          end

          if attributes.key?(:'option_count')
            self.option_count = attributes[:'option_count']
          end

          if attributes.key?(:'foreign_ids')
            if (value = attributes[:'foreign_ids']).is_a?(Array)
              self.foreign_ids = value
            end
          end

          if attributes.key?(:'created_at')
            self.created_at = attributes[:'created_at']
          end

          if attributes.key?(:'deleted')
            self.deleted = attributes[:'deleted']
          end

          if attributes.key?(:'created_by')
            self.created_by = attributes[:'created_by']
          end

          if attributes.key?(:'name')
            self.name = attributes[:'name']
          end

          if attributes.key?(:'options')
            if (value = attributes[:'options']).is_a?(Array)
              self.options = value
            end
          end

          if attributes.key?(:'width')
            self.width = attributes[:'width']
          end

          if attributes.key?(:'id')
            self.id = attributes[:'id']
          end

          if attributes.key?(:'foreign_ids_by_id')
            if (value = attributes[:'foreign_ids_by_id']).is_a?(Hash)
              self.foreign_ids_by_id = value
            end
          end

          if attributes.key?(:'foreign_column_id')
            self.foreign_column_id = attributes[:'foreign_column_id']
          end

          if attributes.key?(:'foreign_ids_by_name')
            if (value = attributes[:'foreign_ids_by_name']).is_a?(Hash)
              self.foreign_ids_by_name = value
            end
          end

          if attributes.key?(:'updated_at')
            self.updated_at = attributes[:'updated_at']
          end
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          invalid_properties = Array.new
          if @label.nil?
            invalid_properties.push('invalid value for "label", label cannot be nil.')
          end

          if @type.nil?
            invalid_properties.push('invalid value for "type", type cannot be nil.')
          end

          if @name.nil?
            invalid_properties.push('invalid value for "name", name cannot be nil.')
          end

          invalid_properties
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          return false if @label.nil?
          return false if @type.nil?
          type_validator = EnumAttributeValidator.new('String', ["NULL", "TEXT", "NUMBER", "URL", "IMAGE", "SELECT", "MULTISELECT", "BOOLEAN", "LOCATION", "DATE", "DATETIME", "CURRENCY", "RICHTEXT", "FOREIGN_ID", "VIDEO", "CTA", "FILE", "JSON", "COMPOSITE", "CODE"])
          return false unless type_validator.valid?(@type)
          return false if @name.nil?
          true
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] type Object to be assigned
        def type=(type)
          validator = EnumAttributeValidator.new('String', ["NULL", "TEXT", "NUMBER", "URL", "IMAGE", "SELECT", "MULTISELECT", "BOOLEAN", "LOCATION", "DATE", "DATETIME", "CURRENCY", "RICHTEXT", "FOREIGN_ID", "VIDEO", "CTA", "FILE", "JSON", "COMPOSITE", "CODE"])
          unless validator.valid?(type)
            fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
          end
          @type = type
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(o)
          return true if self.equal?(o)
          self.class == o.class &&
              created_by_user_id == o.created_by_user_id &&
              foreign_table_id == o.foreign_table_id &&
              updated_by == o.updated_by &&
              description == o.description &&
              label == o.label &&
              updated_by_user_id == o.updated_by_user_id &&
              type == o.type &&
              option_count == o.option_count &&
              foreign_ids == o.foreign_ids &&
              created_at == o.created_at &&
              deleted == o.deleted &&
              created_by == o.created_by &&
              name == o.name &&
              options == o.options &&
              width == o.width &&
              id == o.id &&
              foreign_ids_by_id == o.foreign_ids_by_id &&
              foreign_column_id == o.foreign_column_id &&
              foreign_ids_by_name == o.foreign_ids_by_name &&
              updated_at == o.updated_at
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(o)
          self == o
        end

        # Calculates hash code according to all attributes.
        # @return [Integer] Hash code
        def hash
          [created_by_user_id, foreign_table_id, updated_by, description, label, updated_by_user_id, type, option_count, foreign_ids, created_at, deleted, created_by, name, options, width, id, foreign_ids_by_id, foreign_column_id, foreign_ids_by_name, updated_at].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def self.build_from_hash(attributes)
          new.build_from_hash(attributes)
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)
          attributes = attributes.transform_keys(&:to_sym)
          self.class.openapi_types.each_pair do |key, type|
            if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
              self.send("#{key}=", nil)
            elsif type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :Time
            Time.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :Boolean
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            # models (e.g. Pet) or oneOf
            klass = Hubspot::Cms::Hubdb.const_get(type)
            klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = self.send(attr)
            if value.nil?
              is_nullable = self.class.openapi_nullable.include?(attr)
              next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
            end

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end

      end

    end
  end
end
