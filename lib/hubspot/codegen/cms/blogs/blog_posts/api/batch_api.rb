=begin
#Posts

#Use these endpoints for interacting with Blog Posts, Blog Authors, and Blog Tags

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module Hubspot
  module Cms
    module Blogs
      module BlogPosts
        class BatchApi
          attr_accessor :api_client

          def initialize(api_client = ApiClient.default)
            @api_client = api_client
          end
          # Delete a batch of blog posts
          # Delete a blog post by ID.  Note: This is not the same as the in-app `archive` function. To perform a dashboard `archive` send an normal update with the `archivedInDashboard` field set to `true`.
          # @param batch_input_string [BatchInputString] The JSON array of Blog Post ids.
          # @param [Hash] opts the optional parameters
          # @return [nil]
          def archive(batch_input_string, opts = {})
            archive_with_http_info(batch_input_string, opts)
            nil
          end

          # Delete a batch of blog posts
          # Delete a blog post by ID.  Note: This is not the same as the in-app &#x60;archive&#x60; function. To perform a dashboard &#x60;archive&#x60; send an normal update with the &#x60;archivedInDashboard&#x60; field set to &#x60;true&#x60;.
          # @param batch_input_string [BatchInputString] The JSON array of Blog Post ids.
          # @param [Hash] opts the optional parameters
          # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
          def archive_with_http_info(batch_input_string, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BatchApi.archive ...'
            end
            # verify the required parameter 'batch_input_string' is set
            if @api_client.config.client_side_validation && batch_input_string.nil?
              fail ArgumentError, "Missing the required parameter 'batch_input_string' when calling BatchApi.archive"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/batch/archive'

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['*/*'])
            # HTTP header 'Content-Type'
            content_type = @api_client.select_header_content_type(['application/json'])
            if !content_type.nil?
                header_params['Content-Type'] = content_type
            end

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_string)

            # return_type
            return_type = opts[:debug_return_type]

            # auth_names
            auth_names = opts[:debug_auth_names] || ['oauth2']

            new_options = opts.merge(
              :operation => :"BatchApi.archive",
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BatchApi#archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Create a batch of blog posts
          # Create a batch of blog posts, specifying their content in the request body.
          # @param batch_input_blog_post [BatchInputBlogPost] The JSON array of new Blog Posts to create.
          # @param [Hash] opts the optional parameters
          # @return [BatchResponseBlogPost]
          def create(batch_input_blog_post, opts = {})
            data, _status_code, _headers = create_with_http_info(batch_input_blog_post, opts)
            data
          end

          # Create a batch of blog posts
          # Create a batch of blog posts, specifying their content in the request body.
          # @param batch_input_blog_post [BatchInputBlogPost] The JSON array of new Blog Posts to create.
          # @param [Hash] opts the optional parameters
          # @return [Array<(BatchResponseBlogPost, Integer, Hash)>] BatchResponseBlogPost data, response status code and response headers
          def create_with_http_info(batch_input_blog_post, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BatchApi.create ...'
            end
            # verify the required parameter 'batch_input_blog_post' is set
            if @api_client.config.client_side_validation && batch_input_blog_post.nil?
              fail ArgumentError, "Missing the required parameter 'batch_input_blog_post' when calling BatchApi.create"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/batch/create'

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            content_type = @api_client.select_header_content_type(['application/json'])
            if !content_type.nil?
                header_params['Content-Type'] = content_type
            end

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_blog_post)

            # return_type
            return_type = opts[:debug_return_type] || 'BatchResponseBlogPost'

            # auth_names
            auth_names = opts[:debug_auth_names] || ['oauth2']

            new_options = opts.merge(
              :operation => :"BatchApi.create",
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BatchApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Retrieve a batch of Blog Posts
          # Retrieve a batch of blog posts by ID. identified in the request body.
          # @param batch_input_string [BatchInputString] The JSON array of Blog Post ids.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Specifies whether to return deleted blog posts Defaults to &#x60;false&#x60;.
          # @return [BatchResponseBlogPost]
          def read(batch_input_string, opts = {})
            data, _status_code, _headers = read_with_http_info(batch_input_string, opts)
            data
          end

          # Retrieve a batch of Blog Posts
          # Retrieve a batch of blog posts by ID. identified in the request body.
          # @param batch_input_string [BatchInputString] The JSON array of Blog Post ids.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Specifies whether to return deleted blog posts Defaults to &#x60;false&#x60;.
          # @return [Array<(BatchResponseBlogPost, Integer, Hash)>] BatchResponseBlogPost data, response status code and response headers
          def read_with_http_info(batch_input_string, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BatchApi.read ...'
            end
            # verify the required parameter 'batch_input_string' is set
            if @api_client.config.client_side_validation && batch_input_string.nil?
              fail ArgumentError, "Missing the required parameter 'batch_input_string' when calling BatchApi.read"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/batch/read'

            # query parameters
            query_params = opts[:query_params] || {}
            query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            content_type = @api_client.select_header_content_type(['application/json'])
            if !content_type.nil?
                header_params['Content-Type'] = content_type
            end

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_string)

            # return_type
            return_type = opts[:debug_return_type] || 'BatchResponseBlogPost'

            # auth_names
            auth_names = opts[:debug_auth_names] || ['oauth2']

            new_options = opts.merge(
              :operation => :"BatchApi.read",
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BatchApi#read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Update a batch of Blog Posts
          # Update a batch of blog posts.
          # @param batch_input_json_node [BatchInputJsonNode] A JSON array of the JSON representations of the updated Blog Posts.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;.
          # @return [BatchResponseBlogPost]
          def update(batch_input_json_node, opts = {})
            data, _status_code, _headers = update_with_http_info(batch_input_json_node, opts)
            data
          end

          # Update a batch of Blog Posts
          # Update a batch of blog posts.
          # @param batch_input_json_node [BatchInputJsonNode] A JSON array of the JSON representations of the updated Blog Posts.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;.
          # @return [Array<(BatchResponseBlogPost, Integer, Hash)>] BatchResponseBlogPost data, response status code and response headers
          def update_with_http_info(batch_input_json_node, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BatchApi.update ...'
            end
            # verify the required parameter 'batch_input_json_node' is set
            if @api_client.config.client_side_validation && batch_input_json_node.nil?
              fail ArgumentError, "Missing the required parameter 'batch_input_json_node' when calling BatchApi.update"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/batch/update'

            # query parameters
            query_params = opts[:query_params] || {}
            query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            content_type = @api_client.select_header_content_type(['application/json'])
            if !content_type.nil?
                header_params['Content-Type'] = content_type
            end

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_input_json_node)

            # return_type
            return_type = opts[:debug_return_type] || 'BatchResponseBlogPost'

            # auth_names
            auth_names = opts[:debug_auth_names] || ['oauth2']

            new_options = opts.merge(
              :operation => :"BatchApi.update",
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BatchApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end
        end
      end
    end
  end
end
