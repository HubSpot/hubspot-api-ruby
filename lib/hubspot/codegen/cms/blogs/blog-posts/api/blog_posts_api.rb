=begin
#Blog Post endpoints

#Use these endpoints for interacting with Blog Posts, Blog Authors, and Blog Tags

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module Hubspot
  module Cms
    module Blogs
      module BlogPosts
        class BlogPostsApi
          attr_accessor :api_client

          def initialize(api_client = ApiClient.default)
            @api_client = api_client
          end
          # Delete a Blog Post
          # Delete the Blog Post object identified by the id in the path.
          # @param object_id [String] The Blog Post id.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Whether to return only results that have been archived.
          # @return [nil]
          def archive(object_id, opts = {})
            archive_with_http_info(object_id, opts)
            nil
          end

          # Delete a Blog Post
          # Delete the Blog Post object identified by the id in the path.
          # @param object_id [String] The Blog Post id.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Whether to return only results that have been archived.
          # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
          def archive_with_http_info(object_id, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.archive ...'
            end
            # verify the required parameter 'object_id' is set
            if @api_client.config.client_side_validation && object_id.nil?
              fail ArgumentError, "Missing the required parameter 'object_id' when calling BlogPostsApi.archive"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/{objectId}'.sub('{' + 'objectId' + '}', CGI.escape(object_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}
            query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['*/*'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] 

            # return_type
            return_type = opts[:return_type] 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Delete a batch of Blog Posts
          # Delete the Blog Post objects identified in the request body. Note: This is not the same as the in-app `archive` function. To perform a dashboard `archive` send an normal update with the `archivedInDashboard` field set to true.
          # @param batch_input_string [BatchInputString] The JSON array of Blog Post ids.
          # @param [Hash] opts the optional parameters
          # @return [nil]
          def archive_batch(batch_input_string, opts = {})
            archive_batch_with_http_info(batch_input_string, opts)
            nil
          end

          # Delete a batch of Blog Posts
          # Delete the Blog Post objects identified in the request body. Note: This is not the same as the in-app &#x60;archive&#x60; function. To perform a dashboard &#x60;archive&#x60; send an normal update with the &#x60;archivedInDashboard&#x60; field set to true.
          # @param batch_input_string [BatchInputString] The JSON array of Blog Post ids.
          # @param [Hash] opts the optional parameters
          # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
          def archive_batch_with_http_info(batch_input_string, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.archive_batch ...'
            end
            # verify the required parameter 'batch_input_string' is set
            if @api_client.config.client_side_validation && batch_input_string.nil?
              fail ArgumentError, "Missing the required parameter 'batch_input_string' when calling BlogPostsApi.archive_batch"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/batch/archive'

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(batch_input_string) 

            # return_type
            return_type = opts[:return_type] 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#archive_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Attach a Blog Post to a multi-language group
          # Attach a Blog Post to a multi-language group.
          # @param attach_to_lang_primary_request_v_next [AttachToLangPrimaryRequestVNext] The JSON representation of the AttachToLangPrimaryRequest object.
          # @param [Hash] opts the optional parameters
          # @return [Error]
          def attach_to_lang_group(attach_to_lang_primary_request_v_next, opts = {})
            data, _status_code, _headers = attach_to_lang_group_with_http_info(attach_to_lang_primary_request_v_next, opts)
            data
          end

          # Attach a Blog Post to a multi-language group
          # Attach a Blog Post to a multi-language group.
          # @param attach_to_lang_primary_request_v_next [AttachToLangPrimaryRequestVNext] The JSON representation of the AttachToLangPrimaryRequest object.
          # @param [Hash] opts the optional parameters
          # @return [Array<(Error, Integer, Hash)>] Error data, response status code and response headers
          def attach_to_lang_group_with_http_info(attach_to_lang_primary_request_v_next, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.attach_to_lang_group ...'
            end
            # verify the required parameter 'attach_to_lang_primary_request_v_next' is set
            if @api_client.config.client_side_validation && attach_to_lang_primary_request_v_next.nil?
              fail ArgumentError, "Missing the required parameter 'attach_to_lang_primary_request_v_next' when calling BlogPostsApi.attach_to_lang_group"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/multi-language/attach-to-lang-group'

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(attach_to_lang_primary_request_v_next) 

            # return_type
            return_type = opts[:return_type] || 'Error' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#attach_to_lang_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Clone a Blog Post
          # Clone a Blog Post.
          # @param content_clone_request_v_next [ContentCloneRequestVNext] The JSON representation of the ContentCloneRequest object.
          # @param [Hash] opts the optional parameters
          # @return [BlogPost]
          def clone(content_clone_request_v_next, opts = {})
            data, _status_code, _headers = clone_with_http_info(content_clone_request_v_next, opts)
            data
          end

          # Clone a Blog Post
          # Clone a Blog Post.
          # @param content_clone_request_v_next [ContentCloneRequestVNext] The JSON representation of the ContentCloneRequest object.
          # @param [Hash] opts the optional parameters
          # @return [Array<(BlogPost, Integer, Hash)>] BlogPost data, response status code and response headers
          def clone_with_http_info(content_clone_request_v_next, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.clone ...'
            end
            # verify the required parameter 'content_clone_request_v_next' is set
            if @api_client.config.client_side_validation && content_clone_request_v_next.nil?
              fail ArgumentError, "Missing the required parameter 'content_clone_request_v_next' when calling BlogPostsApi.clone"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/clone'

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(content_clone_request_v_next) 

            # return_type
            return_type = opts[:return_type] || 'BlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#clone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Create a new Blog Post
          # Create a new Blog Post.
          # @param blog_post [BlogPost] The JSON representation of a new Blog Post.
          # @param [Hash] opts the optional parameters
          # @return [BlogPost]
          def create(blog_post, opts = {})
            data, _status_code, _headers = create_with_http_info(blog_post, opts)
            data
          end

          # Create a new Blog Post
          # Create a new Blog Post.
          # @param blog_post [BlogPost] The JSON representation of a new Blog Post.
          # @param [Hash] opts the optional parameters
          # @return [Array<(BlogPost, Integer, Hash)>] BlogPost data, response status code and response headers
          def create_with_http_info(blog_post, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.create ...'
            end
            # verify the required parameter 'blog_post' is set
            if @api_client.config.client_side_validation && blog_post.nil?
              fail ArgumentError, "Missing the required parameter 'blog_post' when calling BlogPostsApi.create"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts'

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(blog_post) 

            # return_type
            return_type = opts[:return_type] || 'BlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Create a batch of Blog Posts
          # Create the Blog Post objects detailed in the request body.
          # @param batch_input_blog_post [BatchInputBlogPost] The JSON array of new Blog Posts to create.
          # @param [Hash] opts the optional parameters
          # @return [BatchResponseBlogPost]
          def create_batch(batch_input_blog_post, opts = {})
            data, _status_code, _headers = create_batch_with_http_info(batch_input_blog_post, opts)
            data
          end

          # Create a batch of Blog Posts
          # Create the Blog Post objects detailed in the request body.
          # @param batch_input_blog_post [BatchInputBlogPost] The JSON array of new Blog Posts to create.
          # @param [Hash] opts the optional parameters
          # @return [Array<(BatchResponseBlogPost, Integer, Hash)>] BatchResponseBlogPost data, response status code and response headers
          def create_batch_with_http_info(batch_input_blog_post, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.create_batch ...'
            end
            # verify the required parameter 'batch_input_blog_post' is set
            if @api_client.config.client_side_validation && batch_input_blog_post.nil?
              fail ArgumentError, "Missing the required parameter 'batch_input_blog_post' when calling BlogPostsApi.create_batch"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/batch/create'

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(batch_input_blog_post) 

            # return_type
            return_type = opts[:return_type] || 'BatchResponseBlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#create_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Create a new language variation
          # Create a new language variation from an existing Blog Post
          # @param blog_post_language_clone_request_v_next [BlogPostLanguageCloneRequestVNext] The JSON representation of the BlogPostLanguageCloneRequestVNext object.
          # @param [Hash] opts the optional parameters
          # @return [BlogPost]
          def create_lang_variation(blog_post_language_clone_request_v_next, opts = {})
            data, _status_code, _headers = create_lang_variation_with_http_info(blog_post_language_clone_request_v_next, opts)
            data
          end

          # Create a new language variation
          # Create a new language variation from an existing Blog Post
          # @param blog_post_language_clone_request_v_next [BlogPostLanguageCloneRequestVNext] The JSON representation of the BlogPostLanguageCloneRequestVNext object.
          # @param [Hash] opts the optional parameters
          # @return [Array<(BlogPost, Integer, Hash)>] BlogPost data, response status code and response headers
          def create_lang_variation_with_http_info(blog_post_language_clone_request_v_next, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.create_lang_variation ...'
            end
            # verify the required parameter 'blog_post_language_clone_request_v_next' is set
            if @api_client.config.client_side_validation && blog_post_language_clone_request_v_next.nil?
              fail ArgumentError, "Missing the required parameter 'blog_post_language_clone_request_v_next' when calling BlogPostsApi.create_lang_variation"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/multi-language/create-language-variation'

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(blog_post_language_clone_request_v_next) 

            # return_type
            return_type = opts[:return_type] || 'BlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#create_lang_variation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Detach a Blog Post from a multi-language group
          # Detach a Blog Post from a multi-language group.
          # @param detach_from_lang_group_request_v_next [DetachFromLangGroupRequestVNext] The JSON representation of the DetachFromLangGroupRequest object.
          # @param [Hash] opts the optional parameters
          # @return [Error]
          def detach_from_lang_group(detach_from_lang_group_request_v_next, opts = {})
            data, _status_code, _headers = detach_from_lang_group_with_http_info(detach_from_lang_group_request_v_next, opts)
            data
          end

          # Detach a Blog Post from a multi-language group
          # Detach a Blog Post from a multi-language group.
          # @param detach_from_lang_group_request_v_next [DetachFromLangGroupRequestVNext] The JSON representation of the DetachFromLangGroupRequest object.
          # @param [Hash] opts the optional parameters
          # @return [Array<(Error, Integer, Hash)>] Error data, response status code and response headers
          def detach_from_lang_group_with_http_info(detach_from_lang_group_request_v_next, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.detach_from_lang_group ...'
            end
            # verify the required parameter 'detach_from_lang_group_request_v_next' is set
            if @api_client.config.client_side_validation && detach_from_lang_group_request_v_next.nil?
              fail ArgumentError, "Missing the required parameter 'detach_from_lang_group_request_v_next' when calling BlogPostsApi.detach_from_lang_group"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/multi-language/detach-from-lang-group'

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(detach_from_lang_group_request_v_next) 

            # return_type
            return_type = opts[:return_type] || 'Error' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#detach_from_lang_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Retrieve a Blog Post
          # Retrieve the Blog Post object identified by the id in the path.
          # @param object_id [String] The Blog Post id.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;.
          # @return [BlogPost]
          def get_by_id(object_id, opts = {})
            data, _status_code, _headers = get_by_id_with_http_info(object_id, opts)
            data
          end

          # Retrieve a Blog Post
          # Retrieve the Blog Post object identified by the id in the path.
          # @param object_id [String] The Blog Post id.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;.
          # @return [Array<(BlogPost, Integer, Hash)>] BlogPost data, response status code and response headers
          def get_by_id_with_http_info(object_id, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.get_by_id ...'
            end
            # verify the required parameter 'object_id' is set
            if @api_client.config.client_side_validation && object_id.nil?
              fail ArgumentError, "Missing the required parameter 'object_id' when calling BlogPostsApi.get_by_id"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/{objectId}'.sub('{' + 'objectId' + '}', CGI.escape(object_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}
            query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] 

            # return_type
            return_type = opts[:return_type] || 'BlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#get_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Retrieve the full draft version of the Blog Post
          # Retrieve the full draft version of the Blog Post.
          # @param object_id [String] The Blog Post id.
          # @param [Hash] opts the optional parameters
          # @return [BlogPost]
          def get_draft_by_id(object_id, opts = {})
            data, _status_code, _headers = get_draft_by_id_with_http_info(object_id, opts)
            data
          end

          # Retrieve the full draft version of the Blog Post
          # Retrieve the full draft version of the Blog Post.
          # @param object_id [String] The Blog Post id.
          # @param [Hash] opts the optional parameters
          # @return [Array<(BlogPost, Integer, Hash)>] BlogPost data, response status code and response headers
          def get_draft_by_id_with_http_info(object_id, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.get_draft_by_id ...'
            end
            # verify the required parameter 'object_id' is set
            if @api_client.config.client_side_validation && object_id.nil?
              fail ArgumentError, "Missing the required parameter 'object_id' when calling BlogPostsApi.get_draft_by_id"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/{objectId}/draft'.sub('{' + 'objectId' + '}', CGI.escape(object_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] 

            # return_type
            return_type = opts[:return_type] || 'BlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#get_draft_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Get all Blog Posts
          # Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
          # @param [Hash] opts the optional parameters
          # @option opts [DateTime] :created_at Only return Blog Posts created at exactly the specified time.
          # @option opts [DateTime] :created_after Only return Blog Posts created after the specified time.
          # @option opts [DateTime] :created_before Only return Blog Posts created before the specified time.
          # @option opts [DateTime] :updated_at Only return Blog Posts last updated at exactly the specified time.
          # @option opts [DateTime] :updated_after Only return Blog Posts last updated after the specified time.
          # @option opts [DateTime] :updated_before Only return Blog Posts last updated before the specified time.
          # @option opts [Array<String>] :sort Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default.
          # @option opts [String] :after The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
          # @option opts [Integer] :limit The maximum number of results to return. Default is 20.
          # @option opts [Boolean] :archived Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;.
          # @return [CollectionResponseWithTotalBlogPostForwardPaging]
          def get_page(opts = {})
            data, _status_code, _headers = get_page_with_http_info(opts)
            data
          end

          # Get all Blog Posts
          # Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
          # @param [Hash] opts the optional parameters
          # @option opts [DateTime] :created_at Only return Blog Posts created at exactly the specified time.
          # @option opts [DateTime] :created_after Only return Blog Posts created after the specified time.
          # @option opts [DateTime] :created_before Only return Blog Posts created before the specified time.
          # @option opts [DateTime] :updated_at Only return Blog Posts last updated at exactly the specified time.
          # @option opts [DateTime] :updated_after Only return Blog Posts last updated after the specified time.
          # @option opts [DateTime] :updated_before Only return Blog Posts last updated before the specified time.
          # @option opts [Array<String>] :sort Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default.
          # @option opts [String] :after The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
          # @option opts [Integer] :limit The maximum number of results to return. Default is 20.
          # @option opts [Boolean] :archived Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;.
          # @return [Array<(CollectionResponseWithTotalBlogPostForwardPaging, Integer, Hash)>] CollectionResponseWithTotalBlogPostForwardPaging data, response status code and response headers
          def get_page_with_http_info(opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.get_page ...'
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts'

            # query parameters
            query_params = opts[:query_params] || {}
            query_params[:'createdAt'] = opts[:'created_at'] if !opts[:'created_at'].nil?
            query_params[:'createdAfter'] = opts[:'created_after'] if !opts[:'created_after'].nil?
            query_params[:'createdBefore'] = opts[:'created_before'] if !opts[:'created_before'].nil?
            query_params[:'updatedAt'] = opts[:'updated_at'] if !opts[:'updated_at'].nil?
            query_params[:'updatedAfter'] = opts[:'updated_after'] if !opts[:'updated_after'].nil?
            query_params[:'updatedBefore'] = opts[:'updated_before'] if !opts[:'updated_before'].nil?
            query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
            query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
            query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
            query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] 

            # return_type
            return_type = opts[:return_type] || 'CollectionResponseWithTotalBlogPostForwardPaging' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#get_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Retrieves a previous version of a blog post
          # Retrieves a previous version of a blog post.
          # @param object_id [String] The Blog Post id.
          # @param revision_id [String] The Blog Post version id.
          # @param [Hash] opts the optional parameters
          # @return [VersionBlogPost]
          def get_previous_version(object_id, revision_id, opts = {})
            data, _status_code, _headers = get_previous_version_with_http_info(object_id, revision_id, opts)
            data
          end

          # Retrieves a previous version of a blog post
          # Retrieves a previous version of a blog post.
          # @param object_id [String] The Blog Post id.
          # @param revision_id [String] The Blog Post version id.
          # @param [Hash] opts the optional parameters
          # @return [Array<(VersionBlogPost, Integer, Hash)>] VersionBlogPost data, response status code and response headers
          def get_previous_version_with_http_info(object_id, revision_id, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.get_previous_version ...'
            end
            # verify the required parameter 'object_id' is set
            if @api_client.config.client_side_validation && object_id.nil?
              fail ArgumentError, "Missing the required parameter 'object_id' when calling BlogPostsApi.get_previous_version"
            end
            # verify the required parameter 'revision_id' is set
            if @api_client.config.client_side_validation && revision_id.nil?
              fail ArgumentError, "Missing the required parameter 'revision_id' when calling BlogPostsApi.get_previous_version"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}'.sub('{' + 'objectId' + '}', CGI.escape(object_id.to_s)).sub('{' + 'revisionId' + '}', CGI.escape(revision_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] 

            # return_type
            return_type = opts[:return_type] || 'VersionBlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#get_previous_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Retrieves all the previous versions of a blog post
          # Retrieves all the previous versions of a blog post.
          # @param object_id [String] The Blog Post id.
          # @param [Hash] opts the optional parameters
          # @option opts [String] :after The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
          # @option opts [String] :before 
          # @option opts [Integer] :limit The maximum number of results to return. Default is 100.
          # @return [CollectionResponseWithTotalVersionBlogPost]
          def get_previous_versions(object_id, opts = {})
            data, _status_code, _headers = get_previous_versions_with_http_info(object_id, opts)
            data
          end

          # Retrieves all the previous versions of a blog post
          # Retrieves all the previous versions of a blog post.
          # @param object_id [String] The Blog Post id.
          # @param [Hash] opts the optional parameters
          # @option opts [String] :after The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
          # @option opts [String] :before 
          # @option opts [Integer] :limit The maximum number of results to return. Default is 100.
          # @return [Array<(CollectionResponseWithTotalVersionBlogPost, Integer, Hash)>] CollectionResponseWithTotalVersionBlogPost data, response status code and response headers
          def get_previous_versions_with_http_info(object_id, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.get_previous_versions ...'
            end
            # verify the required parameter 'object_id' is set
            if @api_client.config.client_side_validation && object_id.nil?
              fail ArgumentError, "Missing the required parameter 'object_id' when calling BlogPostsApi.get_previous_versions"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/{objectId}/revisions'.sub('{' + 'objectId' + '}', CGI.escape(object_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}
            query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
            query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
            query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] 

            # return_type
            return_type = opts[:return_type] || 'CollectionResponseWithTotalVersionBlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#get_previous_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Push Blog Post draft edits live
          # Take any changes from the draft version of the Blog Post and apply them to the live version.
          # @param object_id [String] The id of the Blog Post for which it&#39;s draft will be pushed live.
          # @param [Hash] opts the optional parameters
          # @return [nil]
          def push_live(object_id, opts = {})
            push_live_with_http_info(object_id, opts)
            nil
          end

          # Push Blog Post draft edits live
          # Take any changes from the draft version of the Blog Post and apply them to the live version.
          # @param object_id [String] The id of the Blog Post for which it&#39;s draft will be pushed live.
          # @param [Hash] opts the optional parameters
          # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
          def push_live_with_http_info(object_id, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.push_live ...'
            end
            # verify the required parameter 'object_id' is set
            if @api_client.config.client_side_validation && object_id.nil?
              fail ArgumentError, "Missing the required parameter 'object_id' when calling BlogPostsApi.push_live"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/{objectId}/draft/push-live'.sub('{' + 'objectId' + '}', CGI.escape(object_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['*/*'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] 

            # return_type
            return_type = opts[:return_type] 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#push_live\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Retrieve a batch of Blog Posts
          # Retrieve the Blog Post objects identified in the request body.
          # @param batch_input_string [BatchInputString] The JSON array of Blog Post ids.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;.
          # @return [BatchResponseBlogPost]
          def read_batch(batch_input_string, opts = {})
            data, _status_code, _headers = read_batch_with_http_info(batch_input_string, opts)
            data
          end

          # Retrieve a batch of Blog Posts
          # Retrieve the Blog Post objects identified in the request body.
          # @param batch_input_string [BatchInputString] The JSON array of Blog Post ids.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;.
          # @return [Array<(BatchResponseBlogPost, Integer, Hash)>] BatchResponseBlogPost data, response status code and response headers
          def read_batch_with_http_info(batch_input_string, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.read_batch ...'
            end
            # verify the required parameter 'batch_input_string' is set
            if @api_client.config.client_side_validation && batch_input_string.nil?
              fail ArgumentError, "Missing the required parameter 'batch_input_string' when calling BlogPostsApi.read_batch"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/batch/read'

            # query parameters
            query_params = opts[:query_params] || {}
            query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(batch_input_string) 

            # return_type
            return_type = opts[:return_type] || 'BatchResponseBlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#read_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Reset the Blog Post draft to the live version
          # Discards any edits and resets the draft to the live version.
          # @param object_id [String] The id of the Blog Post for which it&#39;s draft will be reset.
          # @param [Hash] opts the optional parameters
          # @return [nil]
          def reset_draft(object_id, opts = {})
            reset_draft_with_http_info(object_id, opts)
            nil
          end

          # Reset the Blog Post draft to the live version
          # Discards any edits and resets the draft to the live version.
          # @param object_id [String] The id of the Blog Post for which it&#39;s draft will be reset.
          # @param [Hash] opts the optional parameters
          # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
          def reset_draft_with_http_info(object_id, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.reset_draft ...'
            end
            # verify the required parameter 'object_id' is set
            if @api_client.config.client_side_validation && object_id.nil?
              fail ArgumentError, "Missing the required parameter 'object_id' when calling BlogPostsApi.reset_draft"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/{objectId}/draft/reset'.sub('{' + 'objectId' + '}', CGI.escape(object_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['*/*'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] 

            # return_type
            return_type = opts[:return_type] 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#reset_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Restore a previous version of a blog post
          # Takes a specified version of a blog post and restores it.
          # @param object_id [String] The Blog Post id.
          # @param revision_id [String] The Blog Post version id to restore.
          # @param [Hash] opts the optional parameters
          # @return [BlogPost]
          def restore_previous_version(object_id, revision_id, opts = {})
            data, _status_code, _headers = restore_previous_version_with_http_info(object_id, revision_id, opts)
            data
          end

          # Restore a previous version of a blog post
          # Takes a specified version of a blog post and restores it.
          # @param object_id [String] The Blog Post id.
          # @param revision_id [String] The Blog Post version id to restore.
          # @param [Hash] opts the optional parameters
          # @return [Array<(BlogPost, Integer, Hash)>] BlogPost data, response status code and response headers
          def restore_previous_version_with_http_info(object_id, revision_id, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.restore_previous_version ...'
            end
            # verify the required parameter 'object_id' is set
            if @api_client.config.client_side_validation && object_id.nil?
              fail ArgumentError, "Missing the required parameter 'object_id' when calling BlogPostsApi.restore_previous_version"
            end
            # verify the required parameter 'revision_id' is set
            if @api_client.config.client_side_validation && revision_id.nil?
              fail ArgumentError, "Missing the required parameter 'revision_id' when calling BlogPostsApi.restore_previous_version"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore'.sub('{' + 'objectId' + '}', CGI.escape(object_id.to_s)).sub('{' + 'revisionId' + '}', CGI.escape(revision_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] 

            # return_type
            return_type = opts[:return_type] || 'BlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#restore_previous_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Restore a previous version of a blog post, to the draft version of the blog post
          # Takes a specified version of a blog post, sets it as the new draft version of the blog post.
          # @param object_id [String] The Blog Post id.
          # @param revision_id [Integer] The Blog Post version id to restore.
          # @param [Hash] opts the optional parameters
          # @return [BlogPost]
          def restore_previous_version_to_draft(object_id, revision_id, opts = {})
            data, _status_code, _headers = restore_previous_version_to_draft_with_http_info(object_id, revision_id, opts)
            data
          end

          # Restore a previous version of a blog post, to the draft version of the blog post
          # Takes a specified version of a blog post, sets it as the new draft version of the blog post.
          # @param object_id [String] The Blog Post id.
          # @param revision_id [Integer] The Blog Post version id to restore.
          # @param [Hash] opts the optional parameters
          # @return [Array<(BlogPost, Integer, Hash)>] BlogPost data, response status code and response headers
          def restore_previous_version_to_draft_with_http_info(object_id, revision_id, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.restore_previous_version_to_draft ...'
            end
            # verify the required parameter 'object_id' is set
            if @api_client.config.client_side_validation && object_id.nil?
              fail ArgumentError, "Missing the required parameter 'object_id' when calling BlogPostsApi.restore_previous_version_to_draft"
            end
            # verify the required parameter 'revision_id' is set
            if @api_client.config.client_side_validation && revision_id.nil?
              fail ArgumentError, "Missing the required parameter 'revision_id' when calling BlogPostsApi.restore_previous_version_to_draft"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore-to-draft'.sub('{' + 'objectId' + '}', CGI.escape(object_id.to_s)).sub('{' + 'revisionId' + '}', CGI.escape(revision_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] 

            # return_type
            return_type = opts[:return_type] || 'BlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#restore_previous_version_to_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Schedule a Blog Post to be Published
          # Schedule a Blog Post to be Published.
          # @param content_schedule_request_v_next [ContentScheduleRequestVNext] The JSON representation of the ContentScheduleRequestVNext object.
          # @param [Hash] opts the optional parameters
          # @return [nil]
          def schedule(content_schedule_request_v_next, opts = {})
            schedule_with_http_info(content_schedule_request_v_next, opts)
            nil
          end

          # Schedule a Blog Post to be Published
          # Schedule a Blog Post to be Published.
          # @param content_schedule_request_v_next [ContentScheduleRequestVNext] The JSON representation of the ContentScheduleRequestVNext object.
          # @param [Hash] opts the optional parameters
          # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
          def schedule_with_http_info(content_schedule_request_v_next, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.schedule ...'
            end
            # verify the required parameter 'content_schedule_request_v_next' is set
            if @api_client.config.client_side_validation && content_schedule_request_v_next.nil?
              fail ArgumentError, "Missing the required parameter 'content_schedule_request_v_next' when calling BlogPostsApi.schedule"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/schedule'

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(content_schedule_request_v_next) 

            # return_type
            return_type = opts[:return_type] 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Set a new primary language
          # Set a Blog Post as the primary language of a multi-language group.
          # @param set_new_language_primary_request_v_next [SetNewLanguagePrimaryRequestVNext] The JSON representation of the SetNewLanguagePrimaryRequest object.
          # @param [Hash] opts the optional parameters
          # @return [nil]
          def set_lang_primary(set_new_language_primary_request_v_next, opts = {})
            set_lang_primary_with_http_info(set_new_language_primary_request_v_next, opts)
            nil
          end

          # Set a new primary language
          # Set a Blog Post as the primary language of a multi-language group.
          # @param set_new_language_primary_request_v_next [SetNewLanguagePrimaryRequestVNext] The JSON representation of the SetNewLanguagePrimaryRequest object.
          # @param [Hash] opts the optional parameters
          # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
          def set_lang_primary_with_http_info(set_new_language_primary_request_v_next, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.set_lang_primary ...'
            end
            # verify the required parameter 'set_new_language_primary_request_v_next' is set
            if @api_client.config.client_side_validation && set_new_language_primary_request_v_next.nil?
              fail ArgumentError, "Missing the required parameter 'set_new_language_primary_request_v_next' when calling BlogPostsApi.set_lang_primary"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/multi-language/set-new-lang-primary'

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(set_new_language_primary_request_v_next) 

            # return_type
            return_type = opts[:return_type] 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#set_lang_primary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Update a Blog Post
          # Sparse updates a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
          # @param object_id [String] The Blog Post id.
          # @param blog_post [BlogPost] The JSON representation of the updated Blog Post.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;.
          # @return [BlogPost]
          def update(object_id, blog_post, opts = {})
            data, _status_code, _headers = update_with_http_info(object_id, blog_post, opts)
            data
          end

          # Update a Blog Post
          # Sparse updates a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
          # @param object_id [String] The Blog Post id.
          # @param blog_post [BlogPost] The JSON representation of the updated Blog Post.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;.
          # @return [Array<(BlogPost, Integer, Hash)>] BlogPost data, response status code and response headers
          def update_with_http_info(object_id, blog_post, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.update ...'
            end
            # verify the required parameter 'object_id' is set
            if @api_client.config.client_side_validation && object_id.nil?
              fail ArgumentError, "Missing the required parameter 'object_id' when calling BlogPostsApi.update"
            end
            # verify the required parameter 'blog_post' is set
            if @api_client.config.client_side_validation && blog_post.nil?
              fail ArgumentError, "Missing the required parameter 'blog_post' when calling BlogPostsApi.update"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/{objectId}'.sub('{' + 'objectId' + '}', CGI.escape(object_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}
            query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(blog_post) 

            # return_type
            return_type = opts[:return_type] || 'BlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Update a batch of Blog Posts
          # Update the Blog Post objects identified in the request body.
          # @param batch_input_json_node [BatchInputJsonNode] A JSON array of the JSON representations of the updated Blog Posts.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;.
          # @return [BatchResponseBlogPost]
          def update_batch(batch_input_json_node, opts = {})
            data, _status_code, _headers = update_batch_with_http_info(batch_input_json_node, opts)
            data
          end

          # Update a batch of Blog Posts
          # Update the Blog Post objects identified in the request body.
          # @param batch_input_json_node [BatchInputJsonNode] A JSON array of the JSON representations of the updated Blog Posts.
          # @param [Hash] opts the optional parameters
          # @option opts [Boolean] :archived Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;.
          # @return [Array<(BatchResponseBlogPost, Integer, Hash)>] BatchResponseBlogPost data, response status code and response headers
          def update_batch_with_http_info(batch_input_json_node, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.update_batch ...'
            end
            # verify the required parameter 'batch_input_json_node' is set
            if @api_client.config.client_side_validation && batch_input_json_node.nil?
              fail ArgumentError, "Missing the required parameter 'batch_input_json_node' when calling BlogPostsApi.update_batch"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/batch/update'

            # query parameters
            query_params = opts[:query_params] || {}
            query_params[:'archived'] = opts[:'archived'] if !opts[:'archived'].nil?

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(batch_input_json_node) 

            # return_type
            return_type = opts[:return_type] || 'BatchResponseBlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#update_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Update a Blog Post draft
          # Sparse updates the draft version of a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
          # @param object_id [String] The Blog Post id.
          # @param blog_post [BlogPost] The JSON representation of the updated Blog Post to be applied to the draft.
          # @param [Hash] opts the optional parameters
          # @return [BlogPost]
          def update_draft(object_id, blog_post, opts = {})
            data, _status_code, _headers = update_draft_with_http_info(object_id, blog_post, opts)
            data
          end

          # Update a Blog Post draft
          # Sparse updates the draft version of a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
          # @param object_id [String] The Blog Post id.
          # @param blog_post [BlogPost] The JSON representation of the updated Blog Post to be applied to the draft.
          # @param [Hash] opts the optional parameters
          # @return [Array<(BlogPost, Integer, Hash)>] BlogPost data, response status code and response headers
          def update_draft_with_http_info(object_id, blog_post, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.update_draft ...'
            end
            # verify the required parameter 'object_id' is set
            if @api_client.config.client_side_validation && object_id.nil?
              fail ArgumentError, "Missing the required parameter 'object_id' when calling BlogPostsApi.update_draft"
            end
            # verify the required parameter 'blog_post' is set
            if @api_client.config.client_side_validation && blog_post.nil?
              fail ArgumentError, "Missing the required parameter 'blog_post' when calling BlogPostsApi.update_draft"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/{objectId}/draft'.sub('{' + 'objectId' + '}', CGI.escape(object_id.to_s))

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(blog_post) 

            # return_type
            return_type = opts[:return_type] || 'BlogPost' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#update_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end

          # Update languages of multi-language group
          # Explicitly set new languages for each Blog Post in a multi-language group.
          # @param update_languages_request_v_next [UpdateLanguagesRequestVNext] The JSON representation of the SetNewLanguagePrimaryRequest object.
          # @param [Hash] opts the optional parameters
          # @return [Error]
          def update_langs(update_languages_request_v_next, opts = {})
            data, _status_code, _headers = update_langs_with_http_info(update_languages_request_v_next, opts)
            data
          end

          # Update languages of multi-language group
          # Explicitly set new languages for each Blog Post in a multi-language group.
          # @param update_languages_request_v_next [UpdateLanguagesRequestVNext] The JSON representation of the SetNewLanguagePrimaryRequest object.
          # @param [Hash] opts the optional parameters
          # @return [Array<(Error, Integer, Hash)>] Error data, response status code and response headers
          def update_langs_with_http_info(update_languages_request_v_next, opts = {})
            if @api_client.config.debugging
              @api_client.config.logger.debug 'Calling API: BlogPostsApi.update_langs ...'
            end
            # verify the required parameter 'update_languages_request_v_next' is set
            if @api_client.config.client_side_validation && update_languages_request_v_next.nil?
              fail ArgumentError, "Missing the required parameter 'update_languages_request_v_next' when calling BlogPostsApi.update_langs"
            end
            # resource path
            local_var_path = '/cms/v3/blogs/posts/multi-language/update-languages'

            # query parameters
            query_params = opts[:query_params] || {}

            # header parameters
            header_params = opts[:header_params] || {}
            # HTTP header 'Accept' (if needed)
            header_params['Accept'] = @api_client.select_header_accept(['*/*'])
            # HTTP header 'Content-Type'
            header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

            # form parameters
            form_params = opts[:form_params] || {}

            # http body (model)
            post_body = opts[:body] || @api_client.object_to_http_body(update_languages_request_v_next) 

            # return_type
            return_type = opts[:return_type] || 'Error' 

            # auth_names
            auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

            new_options = opts.merge(
              :header_params => header_params,
              :query_params => query_params,
              :form_params => form_params,
              :body => post_body,
              :auth_names => auth_names,
              :return_type => return_type
            )

            data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
            if @api_client.config.debugging
              @api_client.config.logger.debug "API called: BlogPostsApi#update_langs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
            end
            return data, status_code, headers
          end
        end
      end
    end
  end
end
