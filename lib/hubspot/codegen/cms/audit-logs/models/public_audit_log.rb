=begin
#CMS Audit Logs

#Use this endpoint to query audit logs of CMS changes that occurred on your HubSpot account.

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Hubspot
  module Cms
    module AuditLogs
      class PublicAuditLog
        # The ID of the object.
        attr_accessor :object_id

        # The ID of the user who caused the event.
        attr_accessor :user_id

        # The timestamp at which the event occurred.
        attr_accessor :timestamp

        # The internal name of the object in HubSpot.
        attr_accessor :object_name

        # The name of the user who caused the event.
        attr_accessor :full_name

        # The type of event that took place (CREATED, UPDATED, PUBLISHED, DELETED, UNPUBLISHED).
        attr_accessor :event

        # The type of the object (BLOG, LANDING_PAGE, DOMAIN, HUBDB_TABLE etc.)
        attr_accessor :object_type

        class EnumAttributeValidator
          attr_reader :datatype
          attr_reader :allowable_values

          def initialize(datatype, allowable_values)
            @allowable_values = allowable_values.map do |value|
              case datatype.to_s
              when /Integer/i
                value.to_i
              when /Float/i
                value.to_f
              else
                value
              end
            end
          end

          def valid?(value)
            !value || allowable_values.include?(value)
          end
        end

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            :'object_id' => :'objectId',
            :'user_id' => :'userId',
            :'timestamp' => :'timestamp',
            :'object_name' => :'objectName',
            :'full_name' => :'fullName',
            :'event' => :'event',
            :'object_type' => :'objectType'
          }
        end

        # Returns all the JSON keys this model knows about
        def self.acceptable_attributes
          attribute_map.values
        end

        # Attribute type mapping.
        def self.openapi_types
          {
            :'object_id' => :'String',
            :'user_id' => :'String',
            :'timestamp' => :'Time',
            :'object_name' => :'String',
            :'full_name' => :'String',
            :'event' => :'String',
            :'object_type' => :'String'
          }
        end

        # List of attributes with nullable: true
        def self.openapi_nullable
          Set.new([
          ])
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          if (!attributes.is_a?(Hash))
            fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::Cms::AuditLogs::PublicAuditLog` initialize method"
          end

          # check to see if the attribute exists and convert string to symbol for hash key
          attributes = attributes.each_with_object({}) { |(k, v), h|
            if (!self.class.attribute_map.key?(k.to_sym))
              fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::Cms::AuditLogs::PublicAuditLog`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
            end
            h[k.to_sym] = v
          }

          if attributes.key?(:'object_id')
            self.object_id = attributes[:'object_id']
          end

          if attributes.key?(:'user_id')
            self.user_id = attributes[:'user_id']
          end

          if attributes.key?(:'timestamp')
            self.timestamp = attributes[:'timestamp']
          end

          if attributes.key?(:'object_name')
            self.object_name = attributes[:'object_name']
          end

          if attributes.key?(:'full_name')
            self.full_name = attributes[:'full_name']
          end

          if attributes.key?(:'event')
            self.event = attributes[:'event']
          end

          if attributes.key?(:'object_type')
            self.object_type = attributes[:'object_type']
          end
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          invalid_properties = Array.new
          if @object_id.nil?
            invalid_properties.push('invalid value for "object_id", object_id cannot be nil.')
          end

          if @user_id.nil?
            invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
          end

          if @timestamp.nil?
            invalid_properties.push('invalid value for "timestamp", timestamp cannot be nil.')
          end

          if @object_name.nil?
            invalid_properties.push('invalid value for "object_name", object_name cannot be nil.')
          end

          if @full_name.nil?
            invalid_properties.push('invalid value for "full_name", full_name cannot be nil.')
          end

          if @event.nil?
            invalid_properties.push('invalid value for "event", event cannot be nil.')
          end

          if @object_type.nil?
            invalid_properties.push('invalid value for "object_type", object_type cannot be nil.')
          end

          invalid_properties
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          return false if @object_id.nil?
          return false if @user_id.nil?
          return false if @timestamp.nil?
          return false if @object_name.nil?
          return false if @full_name.nil?
          return false if @event.nil?
          event_validator = EnumAttributeValidator.new('String', ["CREATED", "UPDATED", "PUBLISHED", "DELETED", "UNPUBLISHED"])
          return false unless event_validator.valid?(@event)
          return false if @object_type.nil?
          object_type_validator = EnumAttributeValidator.new('String', ["BLOG", "BLOG_POST", "LANDING_PAGE", "WEBSITE_PAGE", "TEMPLATE", "MODULE", "GLOBAL_MODULE", "SERVERLESS_FUNCTION", "DOMAIN", "URL_MAPPING", "EMAIL", "CONTENT_SETTINGS", "HUBDB_TABLE", "KNOWLEDGE_BASE_ARTICLE", "KNOWLEDGE_BASE", "THEME", "CSS", "JS"])
          return false unless object_type_validator.valid?(@object_type)
          true
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] event Object to be assigned
        def event=(event)
          validator = EnumAttributeValidator.new('String', ["CREATED", "UPDATED", "PUBLISHED", "DELETED", "UNPUBLISHED"])
          unless validator.valid?(event)
            fail ArgumentError, "invalid value for \"event\", must be one of #{validator.allowable_values}."
          end
          @event = event
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] object_type Object to be assigned
        def object_type=(object_type)
          validator = EnumAttributeValidator.new('String', ["BLOG", "BLOG_POST", "LANDING_PAGE", "WEBSITE_PAGE", "TEMPLATE", "MODULE", "GLOBAL_MODULE", "SERVERLESS_FUNCTION", "DOMAIN", "URL_MAPPING", "EMAIL", "CONTENT_SETTINGS", "HUBDB_TABLE", "KNOWLEDGE_BASE_ARTICLE", "KNOWLEDGE_BASE", "THEME", "CSS", "JS"])
          unless validator.valid?(object_type)
            fail ArgumentError, "invalid value for \"object_type\", must be one of #{validator.allowable_values}."
          end
          @object_type = object_type
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(o)
          return true if self.equal?(o)
          self.class == o.class &&
              object_id == o.object_id &&
              user_id == o.user_id &&
              timestamp == o.timestamp &&
              object_name == o.object_name &&
              full_name == o.full_name &&
              event == o.event &&
              object_type == o.object_type
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(o)
          self == o
        end

        # Calculates hash code according to all attributes.
        # @return [Integer] Hash code
        def hash
          [object_id, user_id, timestamp, object_name, full_name, event, object_type].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def self.build_from_hash(attributes)
          new.build_from_hash(attributes)
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)
          attributes = attributes.transform_keys(&:to_sym)
          self.class.openapi_types.each_pair do |key, type|
            if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
              self.send("#{key}=", nil)
            elsif type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :Time
            Time.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :Boolean
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            # models (e.g. Pet) or oneOf
            klass = Hubspot::Cms::AuditLogs.const_get(type)
            klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = self.send(attr)
            if value.nil?
              is_nullable = self.class.openapi_nullable.include?(attr)
              next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
            end

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end

      end

    end
  end
end
