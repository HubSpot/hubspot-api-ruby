=begin
#Files

#Upload and manage files.

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Hubspot
  module Files
    # File
    class File
      # Extension of the file. ex: .jpg, .png, .gif, .pdf, etc.
      attr_accessor :extension

      # File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.
      attr_accessor :access

      # ID of the folder the file is in.
      attr_accessor :parent_folder_id

      attr_accessor :source_group

      attr_accessor :file_md5

      # Encoding of the file.
      attr_accessor :encoding

      # Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.
      attr_accessor :type

      # Previously \"archied\". Indicates if the file should be used when creating new content like web pages.
      attr_accessor :is_usable_in_content

      # URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain.
      attr_accessor :url

      attr_accessor :expires_at

      # Creation time of the file object.
      attr_accessor :created_at

      # Deletion time of the file object.
      attr_accessor :archived_at

      # Path of the file in the file manager.
      attr_accessor :path

      # If the file is deleted.
      attr_accessor :archived

      # Size of the file in bytes.
      attr_accessor :size

      # Name of the file.
      attr_accessor :name

      # For image and video files, the width of the content.
      attr_accessor :width

      # File ID.
      attr_accessor :id

      # Default hosting URL of the file. This will use one of HubSpot's provided URLs to serve the file.
      attr_accessor :default_hosting_url

      # Timestamp of the latest update to the file.
      attr_accessor :updated_at

      # For image and video files, the height of the content.
      attr_accessor :height

      class EnumAttributeValidator
        attr_reader :datatype
        attr_reader :allowable_values

        def initialize(datatype, allowable_values)
          @allowable_values = allowable_values.map do |value|
            case datatype.to_s
            when /Integer/i
              value.to_i
            when /Float/i
              value.to_f
            else
              value
            end
          end
        end

        def valid?(value)
          !value || allowable_values.include?(value)
        end
      end

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'extension' => :'extension',
          :'access' => :'access',
          :'parent_folder_id' => :'parentFolderId',
          :'source_group' => :'sourceGroup',
          :'file_md5' => :'fileMd5',
          :'encoding' => :'encoding',
          :'type' => :'type',
          :'is_usable_in_content' => :'isUsableInContent',
          :'url' => :'url',
          :'expires_at' => :'expiresAt',
          :'created_at' => :'createdAt',
          :'archived_at' => :'archivedAt',
          :'path' => :'path',
          :'archived' => :'archived',
          :'size' => :'size',
          :'name' => :'name',
          :'width' => :'width',
          :'id' => :'id',
          :'default_hosting_url' => :'defaultHostingUrl',
          :'updated_at' => :'updatedAt',
          :'height' => :'height'
        }
      end

      # Returns all the JSON keys this model knows about
      def self.acceptable_attributes
        attribute_map.values
      end

      # Attribute type mapping.
      def self.openapi_types
        {
          :'extension' => :'String',
          :'access' => :'String',
          :'parent_folder_id' => :'String',
          :'source_group' => :'String',
          :'file_md5' => :'String',
          :'encoding' => :'String',
          :'type' => :'String',
          :'is_usable_in_content' => :'Boolean',
          :'url' => :'String',
          :'expires_at' => :'Integer',
          :'created_at' => :'Time',
          :'archived_at' => :'Time',
          :'path' => :'String',
          :'archived' => :'Boolean',
          :'size' => :'Integer',
          :'name' => :'String',
          :'width' => :'Integer',
          :'id' => :'String',
          :'default_hosting_url' => :'String',
          :'updated_at' => :'Time',
          :'height' => :'Integer'
        }
      end

      # List of attributes with nullable: true
      def self.openapi_nullable
        Set.new([
        ])
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        if (!attributes.is_a?(Hash))
          fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::Files::File` initialize method"
        end

        # check to see if the attribute exists and convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h|
          if (!self.class.attribute_map.key?(k.to_sym))
            fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::Files::File`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
          end
          h[k.to_sym] = v
        }

        if attributes.key?(:'extension')
          self.extension = attributes[:'extension']
        end

        if attributes.key?(:'access')
          self.access = attributes[:'access']
        end

        if attributes.key?(:'parent_folder_id')
          self.parent_folder_id = attributes[:'parent_folder_id']
        end

        if attributes.key?(:'source_group')
          self.source_group = attributes[:'source_group']
        end

        if attributes.key?(:'file_md5')
          self.file_md5 = attributes[:'file_md5']
        end

        if attributes.key?(:'encoding')
          self.encoding = attributes[:'encoding']
        end

        if attributes.key?(:'type')
          self.type = attributes[:'type']
        end

        if attributes.key?(:'is_usable_in_content')
          self.is_usable_in_content = attributes[:'is_usable_in_content']
        end

        if attributes.key?(:'url')
          self.url = attributes[:'url']
        end

        if attributes.key?(:'expires_at')
          self.expires_at = attributes[:'expires_at']
        end

        if attributes.key?(:'created_at')
          self.created_at = attributes[:'created_at']
        end

        if attributes.key?(:'archived_at')
          self.archived_at = attributes[:'archived_at']
        end

        if attributes.key?(:'path')
          self.path = attributes[:'path']
        end

        if attributes.key?(:'archived')
          self.archived = attributes[:'archived']
        end

        if attributes.key?(:'size')
          self.size = attributes[:'size']
        end

        if attributes.key?(:'name')
          self.name = attributes[:'name']
        end

        if attributes.key?(:'width')
          self.width = attributes[:'width']
        end

        if attributes.key?(:'id')
          self.id = attributes[:'id']
        end

        if attributes.key?(:'default_hosting_url')
          self.default_hosting_url = attributes[:'default_hosting_url']
        end

        if attributes.key?(:'updated_at')
          self.updated_at = attributes[:'updated_at']
        end

        if attributes.key?(:'height')
          self.height = attributes[:'height']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        if @access.nil?
          invalid_properties.push('invalid value for "access", access cannot be nil.')
        end

        if @created_at.nil?
          invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
        end

        if @archived.nil?
          invalid_properties.push('invalid value for "archived", archived cannot be nil.')
        end

        if @id.nil?
          invalid_properties.push('invalid value for "id", id cannot be nil.')
        end

        if @updated_at.nil?
          invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
        end

        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        return false if @access.nil?
        access_validator = EnumAttributeValidator.new('String', ["PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE", "HIDDEN_SENSITIVE", "SENSITIVE"])
        return false unless access_validator.valid?(@access)
        return false if @created_at.nil?
        return false if @archived.nil?
        return false if @id.nil?
        return false if @updated_at.nil?
        true
      end

      # Custom attribute writer method checking allowed values (enum).
      # @param [Object] access Object to be assigned
      def access=(access)
        validator = EnumAttributeValidator.new('String', ["PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE", "HIDDEN_SENSITIVE", "SENSITIVE"])
        unless validator.valid?(access)
          fail ArgumentError, "invalid value for \"access\", must be one of #{validator.allowable_values}."
        end
        @access = access
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
            extension == o.extension &&
            access == o.access &&
            parent_folder_id == o.parent_folder_id &&
            source_group == o.source_group &&
            file_md5 == o.file_md5 &&
            encoding == o.encoding &&
            type == o.type &&
            is_usable_in_content == o.is_usable_in_content &&
            url == o.url &&
            expires_at == o.expires_at &&
            created_at == o.created_at &&
            archived_at == o.archived_at &&
            path == o.path &&
            archived == o.archived &&
            size == o.size &&
            name == o.name &&
            width == o.width &&
            id == o.id &&
            default_hosting_url == o.default_hosting_url &&
            updated_at == o.updated_at &&
            height == o.height
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Integer] Hash code
      def hash
        [extension, access, parent_folder_id, source_group, file_md5, encoding, type, is_usable_in_content, url, expires_at, created_at, archived_at, path, archived, size, name, width, id, default_hosting_url, updated_at, height].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def self.build_from_hash(attributes)
        new.build_from_hash(attributes)
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        attributes = attributes.transform_keys(&:to_sym)
        self.class.openapi_types.each_pair do |key, type|
          if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
            self.send("#{key}=", nil)
          elsif type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :Time
          Time.parse(value)
        when :Date
          Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :Boolean
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          # models (e.g. Pet) or oneOf
          klass = Hubspot::Files.const_get(type)
          klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          if value.nil?
            is_nullable = self.class.openapi_nullable.include?(attr)
            next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
          end

          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end

    end

  end
end
