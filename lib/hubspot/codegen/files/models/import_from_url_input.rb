=begin
#Files

#Upload and manage files.

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Hubspot
  module Files
    class ImportFromUrlInput
      # One of folderPath or folderId is required. Destination folder path for the uploaded file. If the folder path does not exist, there will be an attempt to create the folder path.
      attr_accessor :folder_path

      # PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can't* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can't* index the file. 
      attr_accessor :access

      # ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder. 
      attr_accessor :duplicate_validation_scope

      # Name to give the resulting file in the file manager.
      attr_accessor :name

      # NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead. 
      attr_accessor :duplicate_validation_strategy

      # Time to live. If specified the file will be deleted after the given time frame. If left unset, the file will exist indefinitely
      attr_accessor :ttl

      # If true, will overwrite existing file if one with the same name and extension exists in the given folder. The overwritten file will be deleted and the uploaded file will take its place with a new ID. If unset or set as false, the new file's name will be updated to prevent colliding with existing file if one exists with the same path, name, and extension
      attr_accessor :overwrite

      attr_accessor :expires_at

      # URL to download the new file from.
      attr_accessor :url

      # One of folderId or folderPath is required. Destination folderId for the uploaded file.
      attr_accessor :folder_id

      class EnumAttributeValidator
        attr_reader :datatype
        attr_reader :allowable_values

        def initialize(datatype, allowable_values)
          @allowable_values = allowable_values.map do |value|
            case datatype.to_s
            when /Integer/i
              value.to_i
            when /Float/i
              value.to_f
            else
              value
            end
          end
        end

        def valid?(value)
          !value || allowable_values.include?(value)
        end
      end

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'folder_path' => :'folderPath',
          :'access' => :'access',
          :'duplicate_validation_scope' => :'duplicateValidationScope',
          :'name' => :'name',
          :'duplicate_validation_strategy' => :'duplicateValidationStrategy',
          :'ttl' => :'ttl',
          :'overwrite' => :'overwrite',
          :'expires_at' => :'expiresAt',
          :'url' => :'url',
          :'folder_id' => :'folderId'
        }
      end

      # Returns all the JSON keys this model knows about
      def self.acceptable_attributes
        attribute_map.values
      end

      # Attribute type mapping.
      def self.openapi_types
        {
          :'folder_path' => :'String',
          :'access' => :'String',
          :'duplicate_validation_scope' => :'String',
          :'name' => :'String',
          :'duplicate_validation_strategy' => :'String',
          :'ttl' => :'String',
          :'overwrite' => :'Boolean',
          :'expires_at' => :'Time',
          :'url' => :'String',
          :'folder_id' => :'String'
        }
      end

      # List of attributes with nullable: true
      def self.openapi_nullable
        Set.new([
        ])
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        if (!attributes.is_a?(Hash))
          fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::Files::ImportFromUrlInput` initialize method"
        end

        # check to see if the attribute exists and convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h|
          if (!self.class.attribute_map.key?(k.to_sym))
            fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::Files::ImportFromUrlInput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
          end
          h[k.to_sym] = v
        }

        if attributes.key?(:'folder_path')
          self.folder_path = attributes[:'folder_path']
        end

        if attributes.key?(:'access')
          self.access = attributes[:'access']
        end

        if attributes.key?(:'duplicate_validation_scope')
          self.duplicate_validation_scope = attributes[:'duplicate_validation_scope']
        end

        if attributes.key?(:'name')
          self.name = attributes[:'name']
        end

        if attributes.key?(:'duplicate_validation_strategy')
          self.duplicate_validation_strategy = attributes[:'duplicate_validation_strategy']
        end

        if attributes.key?(:'ttl')
          self.ttl = attributes[:'ttl']
        end

        if attributes.key?(:'overwrite')
          self.overwrite = attributes[:'overwrite']
        end

        if attributes.key?(:'expires_at')
          self.expires_at = attributes[:'expires_at']
        end

        if attributes.key?(:'url')
          self.url = attributes[:'url']
        end

        if attributes.key?(:'folder_id')
          self.folder_id = attributes[:'folder_id']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        if @access.nil?
          invalid_properties.push('invalid value for "access", access cannot be nil.')
        end

        if @url.nil?
          invalid_properties.push('invalid value for "url", url cannot be nil.')
        end

        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        return false if @access.nil?
        access_validator = EnumAttributeValidator.new('String', ["PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE", "HIDDEN_SENSITIVE", "SENSITIVE"])
        return false unless access_validator.valid?(@access)
        duplicate_validation_scope_validator = EnumAttributeValidator.new('String', ["ENTIRE_PORTAL", "EXACT_FOLDER"])
        return false unless duplicate_validation_scope_validator.valid?(@duplicate_validation_scope)
        duplicate_validation_strategy_validator = EnumAttributeValidator.new('String', ["NONE", "REJECT", "RETURN_EXISTING"])
        return false unless duplicate_validation_strategy_validator.valid?(@duplicate_validation_strategy)
        return false if @url.nil?
        true
      end

      # Custom attribute writer method checking allowed values (enum).
      # @param [Object] access Object to be assigned
      def access=(access)
        validator = EnumAttributeValidator.new('String', ["PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE", "HIDDEN_SENSITIVE", "SENSITIVE"])
        unless validator.valid?(access)
          fail ArgumentError, "invalid value for \"access\", must be one of #{validator.allowable_values}."
        end
        @access = access
      end

      # Custom attribute writer method checking allowed values (enum).
      # @param [Object] duplicate_validation_scope Object to be assigned
      def duplicate_validation_scope=(duplicate_validation_scope)
        validator = EnumAttributeValidator.new('String', ["ENTIRE_PORTAL", "EXACT_FOLDER"])
        unless validator.valid?(duplicate_validation_scope)
          fail ArgumentError, "invalid value for \"duplicate_validation_scope\", must be one of #{validator.allowable_values}."
        end
        @duplicate_validation_scope = duplicate_validation_scope
      end

      # Custom attribute writer method checking allowed values (enum).
      # @param [Object] duplicate_validation_strategy Object to be assigned
      def duplicate_validation_strategy=(duplicate_validation_strategy)
        validator = EnumAttributeValidator.new('String', ["NONE", "REJECT", "RETURN_EXISTING"])
        unless validator.valid?(duplicate_validation_strategy)
          fail ArgumentError, "invalid value for \"duplicate_validation_strategy\", must be one of #{validator.allowable_values}."
        end
        @duplicate_validation_strategy = duplicate_validation_strategy
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
            folder_path == o.folder_path &&
            access == o.access &&
            duplicate_validation_scope == o.duplicate_validation_scope &&
            name == o.name &&
            duplicate_validation_strategy == o.duplicate_validation_strategy &&
            ttl == o.ttl &&
            overwrite == o.overwrite &&
            expires_at == o.expires_at &&
            url == o.url &&
            folder_id == o.folder_id
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Integer] Hash code
      def hash
        [folder_path, access, duplicate_validation_scope, name, duplicate_validation_strategy, ttl, overwrite, expires_at, url, folder_id].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def self.build_from_hash(attributes)
        new.build_from_hash(attributes)
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        attributes = attributes.transform_keys(&:to_sym)
        self.class.openapi_types.each_pair do |key, type|
          if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
            self.send("#{key}=", nil)
          elsif type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :Time
          Time.parse(value)
        when :Date
          Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :Boolean
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          # models (e.g. Pet) or oneOf
          klass = Hubspot::Files.const_get(type)
          klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          if value.nil?
            is_nullable = self.class.openapi_nullable.include?(attr)
            next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
          end

          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end

    end

  end
end
