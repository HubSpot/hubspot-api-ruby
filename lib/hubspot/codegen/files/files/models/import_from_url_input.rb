=begin
#Files

#Upload and manage files.

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Hubspot
  module Files
    module Files
      class ImportFromUrlInput
        # PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can't* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can't* index the file. 
        attr_accessor :access

        # Time to live. If specified the file will be deleted after the given time frame.
        attr_accessor :ttl

        # Name to give the resulting file in the file manager.
        attr_accessor :name

        # URL to download the new file from.
        attr_accessor :url

        # One of folderId or folderPath is required. Destination folder ID for the uploaded file.
        attr_accessor :folder_id

        # One of folderPath or folderId is required. Destination folder path for the uploaded file. If the folder path does not exist, there will be an attempt to create the folder path.
        attr_accessor :folder_path

        # NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead. 
        attr_accessor :duplicate_validation_strategy

        # ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder. 
        attr_accessor :duplicate_validation_scope

        # If true, it will overwrite existing files if a file with the same name exists in the given folder.
        attr_accessor :overwrite

        class EnumAttributeValidator
          attr_reader :datatype
          attr_reader :allowable_values

          def initialize(datatype, allowable_values)
            @allowable_values = allowable_values.map do |value|
              case datatype.to_s
              when /Integer/i
                value.to_i
              when /Float/i
                value.to_f
              else
                value
              end
            end
          end

          def valid?(value)
            !value || allowable_values.include?(value)
          end
        end

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            :'access' => :'access',
            :'ttl' => :'ttl',
            :'name' => :'name',
            :'url' => :'url',
            :'folder_id' => :'folderId',
            :'folder_path' => :'folderPath',
            :'duplicate_validation_strategy' => :'duplicateValidationStrategy',
            :'duplicate_validation_scope' => :'duplicateValidationScope',
            :'overwrite' => :'overwrite'
          }
        end

        # Returns all the JSON keys this model knows about
        def self.acceptable_attributes
          attribute_map.values
        end

        # Attribute type mapping.
        def self.openapi_types
          {
            :'access' => :'String',
            :'ttl' => :'String',
            :'name' => :'String',
            :'url' => :'String',
            :'folder_id' => :'String',
            :'folder_path' => :'String',
            :'duplicate_validation_strategy' => :'String',
            :'duplicate_validation_scope' => :'String',
            :'overwrite' => :'Boolean'
          }
        end

        # List of attributes with nullable: true
        def self.openapi_nullable
          Set.new([
          ])
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          if (!attributes.is_a?(Hash))
            fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::Files::Files::ImportFromUrlInput` initialize method"
          end

          # check to see if the attribute exists and convert string to symbol for hash key
          attributes = attributes.each_with_object({}) { |(k, v), h|
            if (!self.class.attribute_map.key?(k.to_sym))
              fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::Files::Files::ImportFromUrlInput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
            end
            h[k.to_sym] = v
          }

          if attributes.key?(:'access')
            self.access = attributes[:'access']
          end

          if attributes.key?(:'ttl')
            self.ttl = attributes[:'ttl']
          end

          if attributes.key?(:'name')
            self.name = attributes[:'name']
          end

          if attributes.key?(:'url')
            self.url = attributes[:'url']
          end

          if attributes.key?(:'folder_id')
            self.folder_id = attributes[:'folder_id']
          end

          if attributes.key?(:'folder_path')
            self.folder_path = attributes[:'folder_path']
          end

          if attributes.key?(:'duplicate_validation_strategy')
            self.duplicate_validation_strategy = attributes[:'duplicate_validation_strategy']
          end

          if attributes.key?(:'duplicate_validation_scope')
            self.duplicate_validation_scope = attributes[:'duplicate_validation_scope']
          end

          if attributes.key?(:'overwrite')
            self.overwrite = attributes[:'overwrite']
          end
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          invalid_properties = Array.new
          if @access.nil?
            invalid_properties.push('invalid value for "access", access cannot be nil.')
          end

          if @url.nil?
            invalid_properties.push('invalid value for "url", url cannot be nil.')
          end

          if @duplicate_validation_strategy.nil?
            invalid_properties.push('invalid value for "duplicate_validation_strategy", duplicate_validation_strategy cannot be nil.')
          end

          if @duplicate_validation_scope.nil?
            invalid_properties.push('invalid value for "duplicate_validation_scope", duplicate_validation_scope cannot be nil.')
          end

          if @overwrite.nil?
            invalid_properties.push('invalid value for "overwrite", overwrite cannot be nil.')
          end

          invalid_properties
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          return false if @access.nil?
          access_validator = EnumAttributeValidator.new('String', ["PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE"])
          return false unless access_validator.valid?(@access)
          return false if @url.nil?
          return false if @duplicate_validation_strategy.nil?
          duplicate_validation_strategy_validator = EnumAttributeValidator.new('String', ["NONE", "REJECT", "RETURN_EXISTING"])
          return false unless duplicate_validation_strategy_validator.valid?(@duplicate_validation_strategy)
          return false if @duplicate_validation_scope.nil?
          duplicate_validation_scope_validator = EnumAttributeValidator.new('String', ["ENTIRE_PORTAL", "EXACT_FOLDER"])
          return false unless duplicate_validation_scope_validator.valid?(@duplicate_validation_scope)
          return false if @overwrite.nil?
          true
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] access Object to be assigned
        def access=(access)
          validator = EnumAttributeValidator.new('String', ["PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE"])
          unless validator.valid?(access)
            fail ArgumentError, "invalid value for \"access\", must be one of #{validator.allowable_values}."
          end
          @access = access
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] duplicate_validation_strategy Object to be assigned
        def duplicate_validation_strategy=(duplicate_validation_strategy)
          validator = EnumAttributeValidator.new('String', ["NONE", "REJECT", "RETURN_EXISTING"])
          unless validator.valid?(duplicate_validation_strategy)
            fail ArgumentError, "invalid value for \"duplicate_validation_strategy\", must be one of #{validator.allowable_values}."
          end
          @duplicate_validation_strategy = duplicate_validation_strategy
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] duplicate_validation_scope Object to be assigned
        def duplicate_validation_scope=(duplicate_validation_scope)
          validator = EnumAttributeValidator.new('String', ["ENTIRE_PORTAL", "EXACT_FOLDER"])
          unless validator.valid?(duplicate_validation_scope)
            fail ArgumentError, "invalid value for \"duplicate_validation_scope\", must be one of #{validator.allowable_values}."
          end
          @duplicate_validation_scope = duplicate_validation_scope
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(o)
          return true if self.equal?(o)
          self.class == o.class &&
              access == o.access &&
              ttl == o.ttl &&
              name == o.name &&
              url == o.url &&
              folder_id == o.folder_id &&
              folder_path == o.folder_path &&
              duplicate_validation_strategy == o.duplicate_validation_strategy &&
              duplicate_validation_scope == o.duplicate_validation_scope &&
              overwrite == o.overwrite
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(o)
          self == o
        end

        # Calculates hash code according to all attributes.
        # @return [Integer] Hash code
        def hash
          [access, ttl, name, url, folder_id, folder_path, duplicate_validation_strategy, duplicate_validation_scope, overwrite].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def self.build_from_hash(attributes)
          new.build_from_hash(attributes)
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)
          attributes = attributes.transform_keys(&:to_sym)
          self.class.openapi_types.each_pair do |key, type|
            if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
              self.send("#{key}=", nil)
            elsif type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :Time
            Time.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :Boolean
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            # models (e.g. Pet) or oneOf
            klass = Hubspot::Files::Files.const_get(type)
            klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = self.send(attr)
            if value.nil?
              is_nullable = self.class.openapi_nullable.include?(attr)
              next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
            end

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end

      end

    end
  end
end
