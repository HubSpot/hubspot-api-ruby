=begin
#Marketing Events Extension

#These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module Hubspot
  module Marketing
    module Events
      class SubscriberStateChangesApi
        attr_accessor :api_client

        def initialize(api_client = ApiClient.default)
          @api_client = api_client
        end
        # Record
        # Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses.
        # @param external_event_id [String] The id of the marketing event
        # @param subscriber_state [String] The new subscriber state for the HubSpot contacts and the specified marketing event
        # @param external_account_id [String] The account id associated with the marketing event
        # @param batch_input_marketing_event_email_subscriber [BatchInputMarketingEventEmailSubscriber] The details of the contacts to subscribe to the event
        # @param [Hash] opts the optional parameters
        # @return [Error]
        def do_email_upsert_by_id(external_event_id, subscriber_state, external_account_id, batch_input_marketing_event_email_subscriber, opts = {})
          data, _status_code, _headers = do_email_upsert_by_id_with_http_info(external_event_id, subscriber_state, external_account_id, batch_input_marketing_event_email_subscriber, opts)
          data
        end

        # Record
        # Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses.
        # @param external_event_id [String] The id of the marketing event
        # @param subscriber_state [String] The new subscriber state for the HubSpot contacts and the specified marketing event
        # @param external_account_id [String] The account id associated with the marketing event
        # @param batch_input_marketing_event_email_subscriber [BatchInputMarketingEventEmailSubscriber] The details of the contacts to subscribe to the event
        # @param [Hash] opts the optional parameters
        # @return [Array<(Error, Integer, Hash)>] Error data, response status code and response headers
        def do_email_upsert_by_id_with_http_info(external_event_id, subscriber_state, external_account_id, batch_input_marketing_event_email_subscriber, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: SubscriberStateChangesApi.do_email_upsert_by_id ...'
          end
          # verify the required parameter 'external_event_id' is set
          if @api_client.config.client_side_validation && external_event_id.nil?
            fail ArgumentError, "Missing the required parameter 'external_event_id' when calling SubscriberStateChangesApi.do_email_upsert_by_id"
          end
          # verify the required parameter 'subscriber_state' is set
          if @api_client.config.client_side_validation && subscriber_state.nil?
            fail ArgumentError, "Missing the required parameter 'subscriber_state' when calling SubscriberStateChangesApi.do_email_upsert_by_id"
          end
          # verify the required parameter 'external_account_id' is set
          if @api_client.config.client_side_validation && external_account_id.nil?
            fail ArgumentError, "Missing the required parameter 'external_account_id' when calling SubscriberStateChangesApi.do_email_upsert_by_id"
          end
          # verify the required parameter 'batch_input_marketing_event_email_subscriber' is set
          if @api_client.config.client_side_validation && batch_input_marketing_event_email_subscriber.nil?
            fail ArgumentError, "Missing the required parameter 'batch_input_marketing_event_email_subscriber' when calling SubscriberStateChangesApi.do_email_upsert_by_id"
          end
          # resource path
          local_var_path = '/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/email-upsert'.sub('{' + 'externalEventId' + '}', CGI.escape(external_event_id.to_s)).sub('{' + 'subscriberState' + '}', CGI.escape(subscriber_state.to_s))

          # query parameters
          query_params = opts[:query_params] || {}
          query_params[:'externalAccountId'] = external_account_id

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['*/*'])
          # HTTP header 'Content-Type'
          header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:body] || @api_client.object_to_http_body(batch_input_marketing_event_email_subscriber) 

          # return_type
          return_type = opts[:return_type] || 'Error' 

          # auth_names
          auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

          new_options = opts.merge(
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: SubscriberStateChangesApi#do_email_upsert_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end

        # Record
        # Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
        # @param external_event_id [String] The id of the marketing event
        # @param subscriber_state [String] The new subscriber state for the HubSpot contacts and the specified marketing event
        # @param external_account_id [String] The account id associated with the marketing event
        # @param batch_input_marketing_event_subscriber [BatchInputMarketingEventSubscriber] The details of the contacts to subscribe to the event
        # @param [Hash] opts the optional parameters
        # @return [Error]
        def do_upsert_by_id(external_event_id, subscriber_state, external_account_id, batch_input_marketing_event_subscriber, opts = {})
          data, _status_code, _headers = do_upsert_by_id_with_http_info(external_event_id, subscriber_state, external_account_id, batch_input_marketing_event_subscriber, opts)
          data
        end

        # Record
        # Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
        # @param external_event_id [String] The id of the marketing event
        # @param subscriber_state [String] The new subscriber state for the HubSpot contacts and the specified marketing event
        # @param external_account_id [String] The account id associated with the marketing event
        # @param batch_input_marketing_event_subscriber [BatchInputMarketingEventSubscriber] The details of the contacts to subscribe to the event
        # @param [Hash] opts the optional parameters
        # @return [Array<(Error, Integer, Hash)>] Error data, response status code and response headers
        def do_upsert_by_id_with_http_info(external_event_id, subscriber_state, external_account_id, batch_input_marketing_event_subscriber, opts = {})
          if @api_client.config.debugging
            @api_client.config.logger.debug 'Calling API: SubscriberStateChangesApi.do_upsert_by_id ...'
          end
          # verify the required parameter 'external_event_id' is set
          if @api_client.config.client_side_validation && external_event_id.nil?
            fail ArgumentError, "Missing the required parameter 'external_event_id' when calling SubscriberStateChangesApi.do_upsert_by_id"
          end
          # verify the required parameter 'subscriber_state' is set
          if @api_client.config.client_side_validation && subscriber_state.nil?
            fail ArgumentError, "Missing the required parameter 'subscriber_state' when calling SubscriberStateChangesApi.do_upsert_by_id"
          end
          # verify the required parameter 'external_account_id' is set
          if @api_client.config.client_side_validation && external_account_id.nil?
            fail ArgumentError, "Missing the required parameter 'external_account_id' when calling SubscriberStateChangesApi.do_upsert_by_id"
          end
          # verify the required parameter 'batch_input_marketing_event_subscriber' is set
          if @api_client.config.client_side_validation && batch_input_marketing_event_subscriber.nil?
            fail ArgumentError, "Missing the required parameter 'batch_input_marketing_event_subscriber' when calling SubscriberStateChangesApi.do_upsert_by_id"
          end
          # resource path
          local_var_path = '/marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/upsert'.sub('{' + 'externalEventId' + '}', CGI.escape(external_event_id.to_s)).sub('{' + 'subscriberState' + '}', CGI.escape(subscriber_state.to_s))

          # query parameters
          query_params = opts[:query_params] || {}
          query_params[:'externalAccountId'] = external_account_id

          # header parameters
          header_params = opts[:header_params] || {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['*/*'])
          # HTTP header 'Content-Type'
          header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

          # form parameters
          form_params = opts[:form_params] || {}

          # http body (model)
          post_body = opts[:body] || @api_client.object_to_http_body(batch_input_marketing_event_subscriber) 

          # return_type
          return_type = opts[:return_type] || 'Error' 

          # auth_names
          auth_names = opts[:auth_names] || ['hapikey', 'oauth2']

          new_options = opts.merge(
            :header_params => header_params,
            :query_params => query_params,
            :form_params => form_params,
            :body => post_body,
            :auth_names => auth_names,
            :return_type => return_type
          )

          data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
          if @api_client.config.debugging
            @api_client.config.logger.debug "API called: SubscriberStateChangesApi#do_upsert_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
          end
          return data, status_code, headers
        end
      end
    end
  end
end
