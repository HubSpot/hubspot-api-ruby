=begin
#Marketing Events Extension

#These APIs allow you to interact with HubSpot's Marketing Events Extension. It allows you to: * Create, Read or update Marketing Event information in HubSpot * Specify whether a HubSpot contact has registered, attended or cancelled a registration to a Marketing Event. * Specify a URL that can be called to get the details of a Marketing Event. 

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module Hubspot
  module Marketing
    module Events
      class PropertyValue
        attr_accessor :name

        attr_accessor :value

        attr_accessor :timestamp

        attr_accessor :source_id

        attr_accessor :source_label

        attr_accessor :source

        attr_accessor :selected_by_user

        attr_accessor :selected_by_user_timestamp

        attr_accessor :source_vid

        # Source metadata encoded as a base64 string. For example: `ZXhhbXBsZSBzdHJpbmc=`
        attr_accessor :source_metadata

        attr_accessor :request_id

        attr_accessor :updated_by_user_id

        class EnumAttributeValidator
          attr_reader :datatype
          attr_reader :allowable_values

          def initialize(datatype, allowable_values)
            @allowable_values = allowable_values.map do |value|
              case datatype.to_s
              when /Integer/i
                value.to_i
              when /Float/i
                value.to_f
              else
                value
              end
            end
          end

          def valid?(value)
            !value || allowable_values.include?(value)
          end
        end

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            :'name' => :'name',
            :'value' => :'value',
            :'timestamp' => :'timestamp',
            :'source_id' => :'sourceId',
            :'source_label' => :'sourceLabel',
            :'source' => :'source',
            :'selected_by_user' => :'selectedByUser',
            :'selected_by_user_timestamp' => :'selectedByUserTimestamp',
            :'source_vid' => :'sourceVid',
            :'source_metadata' => :'sourceMetadata',
            :'request_id' => :'requestId',
            :'updated_by_user_id' => :'updatedByUserId'
          }
        end

        # Attribute type mapping.
        def self.openapi_types
          {
            :'name' => :'String',
            :'value' => :'String',
            :'timestamp' => :'Integer',
            :'source_id' => :'String',
            :'source_label' => :'String',
            :'source' => :'String',
            :'selected_by_user' => :'Boolean',
            :'selected_by_user_timestamp' => :'Integer',
            :'source_vid' => :'Array<Integer>',
            :'source_metadata' => :'String',
            :'request_id' => :'String',
            :'updated_by_user_id' => :'Integer'
          }
        end

        # List of attributes with nullable: true
        def self.openapi_nullable
          Set.new([
          ])
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          if (!attributes.is_a?(Hash))
            fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::Marketing::Events::PropertyValue` initialize method"
          end

          # check to see if the attribute exists and convert string to symbol for hash key
          attributes = attributes.each_with_object({}) { |(k, v), h|
            if (!self.class.attribute_map.key?(k.to_sym))
              fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::Marketing::Events::PropertyValue`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
            end
            h[k.to_sym] = v
          }

          if attributes.key?(:'name')
            self.name = attributes[:'name']
          end

          if attributes.key?(:'value')
            self.value = attributes[:'value']
          end

          if attributes.key?(:'timestamp')
            self.timestamp = attributes[:'timestamp']
          end

          if attributes.key?(:'source_id')
            self.source_id = attributes[:'source_id']
          end

          if attributes.key?(:'source_label')
            self.source_label = attributes[:'source_label']
          end

          if attributes.key?(:'source')
            self.source = attributes[:'source']
          end

          if attributes.key?(:'selected_by_user')
            self.selected_by_user = attributes[:'selected_by_user']
          end

          if attributes.key?(:'selected_by_user_timestamp')
            self.selected_by_user_timestamp = attributes[:'selected_by_user_timestamp']
          end

          if attributes.key?(:'source_vid')
            if (value = attributes[:'source_vid']).is_a?(Array)
              self.source_vid = value
            end
          end

          if attributes.key?(:'source_metadata')
            self.source_metadata = attributes[:'source_metadata']
          end

          if attributes.key?(:'request_id')
            self.request_id = attributes[:'request_id']
          end

          if attributes.key?(:'updated_by_user_id')
            self.updated_by_user_id = attributes[:'updated_by_user_id']
          end
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          invalid_properties = Array.new
          if @name.nil?
            invalid_properties.push('invalid value for "name", name cannot be nil.')
          end

          if @value.nil?
            invalid_properties.push('invalid value for "value", value cannot be nil.')
          end

          if @timestamp.nil?
            invalid_properties.push('invalid value for "timestamp", timestamp cannot be nil.')
          end

          if @source_id.nil?
            invalid_properties.push('invalid value for "source_id", source_id cannot be nil.')
          end

          if @source_label.nil?
            invalid_properties.push('invalid value for "source_label", source_label cannot be nil.')
          end

          if @source.nil?
            invalid_properties.push('invalid value for "source", source cannot be nil.')
          end

          if @selected_by_user.nil?
            invalid_properties.push('invalid value for "selected_by_user", selected_by_user cannot be nil.')
          end

          if @selected_by_user_timestamp.nil?
            invalid_properties.push('invalid value for "selected_by_user_timestamp", selected_by_user_timestamp cannot be nil.')
          end

          if @source_vid.nil?
            invalid_properties.push('invalid value for "source_vid", source_vid cannot be nil.')
          end

          if @source_metadata.nil?
            invalid_properties.push('invalid value for "source_metadata", source_metadata cannot be nil.')
          end

          if @request_id.nil?
            invalid_properties.push('invalid value for "request_id", request_id cannot be nil.')
          end

          invalid_properties
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          return false if @name.nil?
          return false if @value.nil?
          return false if @timestamp.nil?
          return false if @source_id.nil?
          return false if @source_label.nil?
          return false if @source.nil?
          source_validator = EnumAttributeValidator.new('String', ["IMPORT", "API", "FORM", "ANALYTICS", "MIGRATION", "SALESFORCE", "INTEGRATION", "CONTACTS_WEB", "WAL_INCREMENTAL", "TASK", "EMAIL", "WORKFLOWS", "CALCULATED", "SOCIAL", "BATCH_UPDATE", "SIGNALS", "BIDEN", "DEFAULT", "COMPANIES", "DEALS", "ASSISTS", "PRESENTATIONS", "TALLY", "SIDEKICK", "CRM_UI", "MERGE_CONTACTS", "PORTAL_USER_ASSOCIATOR", "INTEGRATIONS_PLATFORM", "BCC_TO_CRM", "FORWARD_TO_CRM", "ENGAGEMENTS", "SALES", "HEISENBERG", "LEADIN", "GMAIL_INTEGRATION", "ACADEMY", "SALES_MESSAGES", "AVATARS_SERVICE", "MERGE_COMPANIES", "SEQUENCES", "COMPANY_FAMILIES", "MOBILE_IOS", "MOBILE_ANDROID", "CONTACTS", "ASSOCIATIONS", "EXTENSION", "SUCCESS", "BOT", "INTEGRATIONS_SYNC", "AUTOMATION_PLATFORM", "CONVERSATIONS", "EMAIL_INTEGRATION", "CONTENT_MEMBERSHIP", "QUOTES", "BET_ASSIGNMENT", "QUOTAS", "BET_CRM_CONNECTOR", "MEETINGS", "MERGE_OBJECTS", "RECYCLING_BIN", "ADS", "AI_GROUP", "COMMUNICATOR", "SETTINGS", "PROPERTY_SETTINGS", "PIPELINE_SETTINGS", "COMPANY_INSIGHTS", "BEHAVIORAL_EVENTS", "PAYMENTS", "GOALS", "PORTAL_OBJECT_SYNC", "APPROVALS"])
          return false unless source_validator.valid?(@source)
          return false if @selected_by_user.nil?
          return false if @selected_by_user_timestamp.nil?
          return false if @source_vid.nil?
          return false if @source_metadata.nil?
          return false if @request_id.nil?
          true
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] source Object to be assigned
        def source=(source)
          validator = EnumAttributeValidator.new('String', ["IMPORT", "API", "FORM", "ANALYTICS", "MIGRATION", "SALESFORCE", "INTEGRATION", "CONTACTS_WEB", "WAL_INCREMENTAL", "TASK", "EMAIL", "WORKFLOWS", "CALCULATED", "SOCIAL", "BATCH_UPDATE", "SIGNALS", "BIDEN", "DEFAULT", "COMPANIES", "DEALS", "ASSISTS", "PRESENTATIONS", "TALLY", "SIDEKICK", "CRM_UI", "MERGE_CONTACTS", "PORTAL_USER_ASSOCIATOR", "INTEGRATIONS_PLATFORM", "BCC_TO_CRM", "FORWARD_TO_CRM", "ENGAGEMENTS", "SALES", "HEISENBERG", "LEADIN", "GMAIL_INTEGRATION", "ACADEMY", "SALES_MESSAGES", "AVATARS_SERVICE", "MERGE_COMPANIES", "SEQUENCES", "COMPANY_FAMILIES", "MOBILE_IOS", "MOBILE_ANDROID", "CONTACTS", "ASSOCIATIONS", "EXTENSION", "SUCCESS", "BOT", "INTEGRATIONS_SYNC", "AUTOMATION_PLATFORM", "CONVERSATIONS", "EMAIL_INTEGRATION", "CONTENT_MEMBERSHIP", "QUOTES", "BET_ASSIGNMENT", "QUOTAS", "BET_CRM_CONNECTOR", "MEETINGS", "MERGE_OBJECTS", "RECYCLING_BIN", "ADS", "AI_GROUP", "COMMUNICATOR", "SETTINGS", "PROPERTY_SETTINGS", "PIPELINE_SETTINGS", "COMPANY_INSIGHTS", "BEHAVIORAL_EVENTS", "PAYMENTS", "GOALS", "PORTAL_OBJECT_SYNC", "APPROVALS"])
          unless validator.valid?(source)
            fail ArgumentError, "invalid value for \"source\", must be one of #{validator.allowable_values}."
          end
          @source = source
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(o)
          return true if self.equal?(o)
          self.class == o.class &&
              name == o.name &&
              value == o.value &&
              timestamp == o.timestamp &&
              source_id == o.source_id &&
              source_label == o.source_label &&
              source == o.source &&
              selected_by_user == o.selected_by_user &&
              selected_by_user_timestamp == o.selected_by_user_timestamp &&
              source_vid == o.source_vid &&
              source_metadata == o.source_metadata &&
              request_id == o.request_id &&
              updated_by_user_id == o.updated_by_user_id
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(o)
          self == o
        end

        # Calculates hash code according to all attributes.
        # @return [Integer] Hash code
        def hash
          [name, value, timestamp, source_id, source_label, source, selected_by_user, selected_by_user_timestamp, source_vid, source_metadata, request_id, updated_by_user_id].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def self.build_from_hash(attributes)
          new.build_from_hash(attributes)
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)
          self.class.openapi_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end # or else data not found in attributes(hash), not an issue as the data can be optional
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :Boolean
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            Hubspot::Marketing::Events.const_get(type).build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = self.send(attr)
            if value.nil?
              is_nullable = self.class.openapi_nullable.include?(attr)
              next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
            end
            
            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
