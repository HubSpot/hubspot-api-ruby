=begin
#FormsExternalService

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module Hubspot
  module Marketing
    module Forms
      class LegalConsentOptionsImplicitConsentToProcess
        attr_accessor :type

        attr_accessor :communication_consent_text

        attr_accessor :communications_checkboxes

        attr_accessor :privacy_text

        attr_accessor :consent_to_process_text

        class EnumAttributeValidator
          attr_reader :datatype
          attr_reader :allowable_values

          def initialize(datatype, allowable_values)
            @allowable_values = allowable_values.map do |value|
              case datatype.to_s
              when /Integer/i
                value.to_i
              when /Float/i
                value.to_f
              else
                value
              end
            end
          end

          def valid?(value)
            !value || allowable_values.include?(value)
          end
        end

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            :'type' => :'type',
            :'communication_consent_text' => :'communicationConsentText',
            :'communications_checkboxes' => :'communicationsCheckboxes',
            :'privacy_text' => :'privacyText',
            :'consent_to_process_text' => :'consentToProcessText'
          }
        end

        # Attribute type mapping.
        def self.openapi_types
          {
            :'type' => :'String',
            :'communication_consent_text' => :'String',
            :'communications_checkboxes' => :'Array<LegalConsentCheckbox>',
            :'privacy_text' => :'String',
            :'consent_to_process_text' => :'String'
          }
        end

        # List of attributes with nullable: true
        def self.openapi_nullable
          Set.new([
          ])
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          if (!attributes.is_a?(Hash))
            fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::Marketing::Forms::LegalConsentOptionsImplicitConsentToProcess` initialize method"
          end

          # check to see if the attribute exists and convert string to symbol for hash key
          attributes = attributes.each_with_object({}) { |(k, v), h|
            if (!self.class.attribute_map.key?(k.to_sym))
              fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::Marketing::Forms::LegalConsentOptionsImplicitConsentToProcess`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
            end
            h[k.to_sym] = v
          }

          if attributes.key?(:'type')
            self.type = attributes[:'type']
          else
            self.type = 'implicit_consent_to_process'
          end

          if attributes.key?(:'communication_consent_text')
            self.communication_consent_text = attributes[:'communication_consent_text']
          end

          if attributes.key?(:'communications_checkboxes')
            if (value = attributes[:'communications_checkboxes']).is_a?(Array)
              self.communications_checkboxes = value
            end
          end

          if attributes.key?(:'privacy_text')
            self.privacy_text = attributes[:'privacy_text']
          end

          if attributes.key?(:'consent_to_process_text')
            self.consent_to_process_text = attributes[:'consent_to_process_text']
          end
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          invalid_properties = Array.new
          if @type.nil?
            invalid_properties.push('invalid value for "type", type cannot be nil.')
          end

          if @communications_checkboxes.nil?
            invalid_properties.push('invalid value for "communications_checkboxes", communications_checkboxes cannot be nil.')
          end

          if @privacy_text.nil?
            invalid_properties.push('invalid value for "privacy_text", privacy_text cannot be nil.')
          end

          invalid_properties
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          return false if @type.nil?
          type_validator = EnumAttributeValidator.new('String', ["implicit_consent_to_process"])
          return false unless type_validator.valid?(@type)
          return false if @communications_checkboxes.nil?
          return false if @privacy_text.nil?
          true
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] type Object to be assigned
        def type=(type)
          validator = EnumAttributeValidator.new('String', ["implicit_consent_to_process"])
          unless validator.valid?(type)
            fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
          end
          @type = type
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(o)
          return true if self.equal?(o)
          self.class == o.class &&
              type == o.type &&
              communication_consent_text == o.communication_consent_text &&
              communications_checkboxes == o.communications_checkboxes &&
              privacy_text == o.privacy_text &&
              consent_to_process_text == o.consent_to_process_text
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(o)
          self == o
        end

        # Calculates hash code according to all attributes.
        # @return [Integer] Hash code
        def hash
          [type, communication_consent_text, communications_checkboxes, privacy_text, consent_to_process_text].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def self.build_from_hash(attributes)
          new.build_from_hash(attributes)
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)
          self.class.openapi_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end # or else data not found in attributes(hash), not an issue as the data can be optional
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :Boolean
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            Hubspot::Marketing::Forms.const_get(type).build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = self.send(attr)
            if value.nil?
              is_nullable = self.class.openapi_nullable.include?(attr)
              next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
            end
            
            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
