=begin
#FormsExternalService

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module Hubspot
  module Marketing
    module Forms
      class HubSpotFormConfiguration
        # The language of the form.
        attr_accessor :language

        # Whether the form can be cloned.
        attr_accessor :cloneable

        attr_accessor :post_submit_action

        # Whether the form can be edited.
        attr_accessor :editable

        # Whether the form can be archived.
        attr_accessor :archivable

        # Whether CAPTCHA (spam prevention) is enabled.
        attr_accessor :recaptcha_enabled

        # Whether to send a notification email to the contact owner when a submission is received.
        attr_accessor :notify_contact_owner

        # The list of user IDs to receive a notification email when a submission is received.
        attr_accessor :notify_recipients

        # Whether to create a new contact when a form is submitted with an email address that doesnâ€™t match any in your existing contacts records.
        attr_accessor :create_new_contact_for_new_email

        # Whether contact fields should pre-populate with known information when a contact returns to your site.
        attr_accessor :pre_populate_known_values

        # Whether to add a reset link to the form. This removes any pre-populated content on the form and creates a new contact on submission.
        attr_accessor :allow_link_to_reset_known_values

        class EnumAttributeValidator
          attr_reader :datatype
          attr_reader :allowable_values

          def initialize(datatype, allowable_values)
            @allowable_values = allowable_values.map do |value|
              case datatype.to_s
              when /Integer/i
                value.to_i
              when /Float/i
                value.to_f
              else
                value
              end
            end
          end

          def valid?(value)
            !value || allowable_values.include?(value)
          end
        end

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            :'language' => :'language',
            :'cloneable' => :'cloneable',
            :'post_submit_action' => :'postSubmitAction',
            :'editable' => :'editable',
            :'archivable' => :'archivable',
            :'recaptcha_enabled' => :'recaptchaEnabled',
            :'notify_contact_owner' => :'notifyContactOwner',
            :'notify_recipients' => :'notifyRecipients',
            :'create_new_contact_for_new_email' => :'createNewContactForNewEmail',
            :'pre_populate_known_values' => :'prePopulateKnownValues',
            :'allow_link_to_reset_known_values' => :'allowLinkToResetKnownValues'
          }
        end

        # Attribute type mapping.
        def self.openapi_types
          {
            :'language' => :'String',
            :'cloneable' => :'Boolean',
            :'post_submit_action' => :'FormPostSubmitAction',
            :'editable' => :'Boolean',
            :'archivable' => :'Boolean',
            :'recaptcha_enabled' => :'Boolean',
            :'notify_contact_owner' => :'Boolean',
            :'notify_recipients' => :'Array<String>',
            :'create_new_contact_for_new_email' => :'Boolean',
            :'pre_populate_known_values' => :'Boolean',
            :'allow_link_to_reset_known_values' => :'Boolean'
          }
        end

        # List of attributes with nullable: true
        def self.openapi_nullable
          Set.new([
          ])
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          if (!attributes.is_a?(Hash))
            fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::Marketing::Forms::HubSpotFormConfiguration` initialize method"
          end

          # check to see if the attribute exists and convert string to symbol for hash key
          attributes = attributes.each_with_object({}) { |(k, v), h|
            if (!self.class.attribute_map.key?(k.to_sym))
              fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::Marketing::Forms::HubSpotFormConfiguration`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
            end
            h[k.to_sym] = v
          }

          if attributes.key?(:'language')
            self.language = attributes[:'language']
          end

          if attributes.key?(:'cloneable')
            self.cloneable = attributes[:'cloneable']
          end

          if attributes.key?(:'post_submit_action')
            self.post_submit_action = attributes[:'post_submit_action']
          end

          if attributes.key?(:'editable')
            self.editable = attributes[:'editable']
          end

          if attributes.key?(:'archivable')
            self.archivable = attributes[:'archivable']
          end

          if attributes.key?(:'recaptcha_enabled')
            self.recaptcha_enabled = attributes[:'recaptcha_enabled']
          end

          if attributes.key?(:'notify_contact_owner')
            self.notify_contact_owner = attributes[:'notify_contact_owner']
          end

          if attributes.key?(:'notify_recipients')
            if (value = attributes[:'notify_recipients']).is_a?(Array)
              self.notify_recipients = value
            end
          end

          if attributes.key?(:'create_new_contact_for_new_email')
            self.create_new_contact_for_new_email = attributes[:'create_new_contact_for_new_email']
          end

          if attributes.key?(:'pre_populate_known_values')
            self.pre_populate_known_values = attributes[:'pre_populate_known_values']
          end

          if attributes.key?(:'allow_link_to_reset_known_values')
            self.allow_link_to_reset_known_values = attributes[:'allow_link_to_reset_known_values']
          end
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          invalid_properties = Array.new
          if @language.nil?
            invalid_properties.push('invalid value for "language", language cannot be nil.')
          end

          if @cloneable.nil?
            invalid_properties.push('invalid value for "cloneable", cloneable cannot be nil.')
          end

          if @post_submit_action.nil?
            invalid_properties.push('invalid value for "post_submit_action", post_submit_action cannot be nil.')
          end

          if @editable.nil?
            invalid_properties.push('invalid value for "editable", editable cannot be nil.')
          end

          if @archivable.nil?
            invalid_properties.push('invalid value for "archivable", archivable cannot be nil.')
          end

          if @recaptcha_enabled.nil?
            invalid_properties.push('invalid value for "recaptcha_enabled", recaptcha_enabled cannot be nil.')
          end

          if @notify_contact_owner.nil?
            invalid_properties.push('invalid value for "notify_contact_owner", notify_contact_owner cannot be nil.')
          end

          if @notify_recipients.nil?
            invalid_properties.push('invalid value for "notify_recipients", notify_recipients cannot be nil.')
          end

          if @create_new_contact_for_new_email.nil?
            invalid_properties.push('invalid value for "create_new_contact_for_new_email", create_new_contact_for_new_email cannot be nil.')
          end

          if @pre_populate_known_values.nil?
            invalid_properties.push('invalid value for "pre_populate_known_values", pre_populate_known_values cannot be nil.')
          end

          if @allow_link_to_reset_known_values.nil?
            invalid_properties.push('invalid value for "allow_link_to_reset_known_values", allow_link_to_reset_known_values cannot be nil.')
          end

          invalid_properties
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          return false if @language.nil?
          language_validator = EnumAttributeValidator.new('String', ["af", "ar-eg", "bn", "bg", "ca-es", "cs", "da", "de", "el", "en", "es", "es-mx", "fi", "fr", "hr", "hu", "id", "it", "ja", "ko", "nl", "no-no", "pl", "pt", "pt-br", "ro", "ru", "sl", "sv", "th", "tr", "uk", "vi", "zh-cn", "zh-hk"])
          return false unless language_validator.valid?(@language)
          return false if @cloneable.nil?
          return false if @post_submit_action.nil?
          return false if @editable.nil?
          return false if @archivable.nil?
          return false if @recaptcha_enabled.nil?
          return false if @notify_contact_owner.nil?
          return false if @notify_recipients.nil?
          return false if @create_new_contact_for_new_email.nil?
          return false if @pre_populate_known_values.nil?
          return false if @allow_link_to_reset_known_values.nil?
          true
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] language Object to be assigned
        def language=(language)
          validator = EnumAttributeValidator.new('String', ["af", "ar-eg", "bn", "bg", "ca-es", "cs", "da", "de", "el", "en", "es", "es-mx", "fi", "fr", "hr", "hu", "id", "it", "ja", "ko", "nl", "no-no", "pl", "pt", "pt-br", "ro", "ru", "sl", "sv", "th", "tr", "uk", "vi", "zh-cn", "zh-hk"])
          unless validator.valid?(language)
            fail ArgumentError, "invalid value for \"language\", must be one of #{validator.allowable_values}."
          end
          @language = language
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(o)
          return true if self.equal?(o)
          self.class == o.class &&
              language == o.language &&
              cloneable == o.cloneable &&
              post_submit_action == o.post_submit_action &&
              editable == o.editable &&
              archivable == o.archivable &&
              recaptcha_enabled == o.recaptcha_enabled &&
              notify_contact_owner == o.notify_contact_owner &&
              notify_recipients == o.notify_recipients &&
              create_new_contact_for_new_email == o.create_new_contact_for_new_email &&
              pre_populate_known_values == o.pre_populate_known_values &&
              allow_link_to_reset_known_values == o.allow_link_to_reset_known_values
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(o)
          self == o
        end

        # Calculates hash code according to all attributes.
        # @return [Integer] Hash code
        def hash
          [language, cloneable, post_submit_action, editable, archivable, recaptcha_enabled, notify_contact_owner, notify_recipients, create_new_contact_for_new_email, pre_populate_known_values, allow_link_to_reset_known_values].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def self.build_from_hash(attributes)
          new.build_from_hash(attributes)
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)
          self.class.openapi_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end # or else data not found in attributes(hash), not an issue as the data can be optional
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :Boolean
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            Hubspot::Marketing::Forms.const_get(type).build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = self.send(attr)
            if value.nil?
              is_nullable = self.class.openapi_nullable.include?(attr)
              next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
            end
            
            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
