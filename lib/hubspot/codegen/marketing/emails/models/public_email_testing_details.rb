=begin
#Marketing Emails

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Hubspot
  module Marketing
    module Emails
      # AB testing related data. This property is only returned for AB type emails.
      class PublicEmailTestingDetails
        # Version of the email that should be sent if the results are inconclusive after the test period, master or variant.
        attr_accessor :ab_sampling_default

        # Version of the email that should be sent if there are too few recipients to conduct an AB test.
        attr_accessor :ab_sample_size_default

        # Status of the AB test.
        attr_accessor :ab_status

        # The size of your test group.
        attr_accessor :ab_test_percentage

        # Time limit on gathering test results. After this time is up, the winning version will be sent to the remaining contacts.
        attr_accessor :hours_to_wait

        # The ID of the AB test.
        attr_accessor :test_id

        # Metric to determine the version that will be sent to the remaining contacts.
        attr_accessor :ab_success_metric

        class EnumAttributeValidator
          attr_reader :datatype
          attr_reader :allowable_values

          def initialize(datatype, allowable_values)
            @allowable_values = allowable_values.map do |value|
              case datatype.to_s
              when /Integer/i
                value.to_i
              when /Float/i
                value.to_f
              else
                value
              end
            end
          end

          def valid?(value)
            !value || allowable_values.include?(value)
          end
        end

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            :'ab_sampling_default' => :'abSamplingDefault',
            :'ab_sample_size_default' => :'abSampleSizeDefault',
            :'ab_status' => :'abStatus',
            :'ab_test_percentage' => :'abTestPercentage',
            :'hours_to_wait' => :'hoursToWait',
            :'test_id' => :'testId',
            :'ab_success_metric' => :'abSuccessMetric'
          }
        end

        # Returns all the JSON keys this model knows about
        def self.acceptable_attributes
          attribute_map.values
        end

        # Attribute type mapping.
        def self.openapi_types
          {
            :'ab_sampling_default' => :'String',
            :'ab_sample_size_default' => :'String',
            :'ab_status' => :'String',
            :'ab_test_percentage' => :'Integer',
            :'hours_to_wait' => :'Integer',
            :'test_id' => :'String',
            :'ab_success_metric' => :'String'
          }
        end

        # List of attributes with nullable: true
        def self.openapi_nullable
          Set.new([
          ])
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          if (!attributes.is_a?(Hash))
            fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::Marketing::Emails::PublicEmailTestingDetails` initialize method"
          end

          # check to see if the attribute exists and convert string to symbol for hash key
          attributes = attributes.each_with_object({}) { |(k, v), h|
            if (!self.class.attribute_map.key?(k.to_sym))
              fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::Marketing::Emails::PublicEmailTestingDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
            end
            h[k.to_sym] = v
          }

          if attributes.key?(:'ab_sampling_default')
            self.ab_sampling_default = attributes[:'ab_sampling_default']
          end

          if attributes.key?(:'ab_sample_size_default')
            self.ab_sample_size_default = attributes[:'ab_sample_size_default']
          end

          if attributes.key?(:'ab_status')
            self.ab_status = attributes[:'ab_status']
          end

          if attributes.key?(:'ab_test_percentage')
            self.ab_test_percentage = attributes[:'ab_test_percentage']
          end

          if attributes.key?(:'hours_to_wait')
            self.hours_to_wait = attributes[:'hours_to_wait']
          end

          if attributes.key?(:'test_id')
            self.test_id = attributes[:'test_id']
          end

          if attributes.key?(:'ab_success_metric')
            self.ab_success_metric = attributes[:'ab_success_metric']
          end
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          invalid_properties = Array.new
          invalid_properties
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          ab_sampling_default_validator = EnumAttributeValidator.new('String', ["master", "variant", "loser_variant", "mab_master", "mab_variant", "automated_master", "automated_variant", "automated_loser_variant"])
          return false unless ab_sampling_default_validator.valid?(@ab_sampling_default)
          ab_sample_size_default_validator = EnumAttributeValidator.new('String', ["master", "variant", "loser_variant", "mab_master", "mab_variant", "automated_master", "automated_variant", "automated_loser_variant"])
          return false unless ab_sample_size_default_validator.valid?(@ab_sample_size_default)
          ab_status_validator = EnumAttributeValidator.new('String', ["master", "variant", "loser_variant", "mab_master", "mab_variant", "automated_master", "automated_variant", "automated_loser_variant"])
          return false unless ab_status_validator.valid?(@ab_status)
          ab_success_metric_validator = EnumAttributeValidator.new('String', ["CLICKS_BY_OPENS", "CLICKS_BY_DELIVERED", "OPENS_BY_DELIVERED"])
          return false unless ab_success_metric_validator.valid?(@ab_success_metric)
          true
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] ab_sampling_default Object to be assigned
        def ab_sampling_default=(ab_sampling_default)
          validator = EnumAttributeValidator.new('String', ["master", "variant", "loser_variant", "mab_master", "mab_variant", "automated_master", "automated_variant", "automated_loser_variant"])
          unless validator.valid?(ab_sampling_default)
            fail ArgumentError, "invalid value for \"ab_sampling_default\", must be one of #{validator.allowable_values}."
          end
          @ab_sampling_default = ab_sampling_default
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] ab_sample_size_default Object to be assigned
        def ab_sample_size_default=(ab_sample_size_default)
          validator = EnumAttributeValidator.new('String', ["master", "variant", "loser_variant", "mab_master", "mab_variant", "automated_master", "automated_variant", "automated_loser_variant"])
          unless validator.valid?(ab_sample_size_default)
            fail ArgumentError, "invalid value for \"ab_sample_size_default\", must be one of #{validator.allowable_values}."
          end
          @ab_sample_size_default = ab_sample_size_default
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] ab_status Object to be assigned
        def ab_status=(ab_status)
          validator = EnumAttributeValidator.new('String', ["master", "variant", "loser_variant", "mab_master", "mab_variant", "automated_master", "automated_variant", "automated_loser_variant"])
          unless validator.valid?(ab_status)
            fail ArgumentError, "invalid value for \"ab_status\", must be one of #{validator.allowable_values}."
          end
          @ab_status = ab_status
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] ab_success_metric Object to be assigned
        def ab_success_metric=(ab_success_metric)
          validator = EnumAttributeValidator.new('String', ["CLICKS_BY_OPENS", "CLICKS_BY_DELIVERED", "OPENS_BY_DELIVERED"])
          unless validator.valid?(ab_success_metric)
            fail ArgumentError, "invalid value for \"ab_success_metric\", must be one of #{validator.allowable_values}."
          end
          @ab_success_metric = ab_success_metric
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(o)
          return true if self.equal?(o)
          self.class == o.class &&
              ab_sampling_default == o.ab_sampling_default &&
              ab_sample_size_default == o.ab_sample_size_default &&
              ab_status == o.ab_status &&
              ab_test_percentage == o.ab_test_percentage &&
              hours_to_wait == o.hours_to_wait &&
              test_id == o.test_id &&
              ab_success_metric == o.ab_success_metric
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(o)
          self == o
        end

        # Calculates hash code according to all attributes.
        # @return [Integer] Hash code
        def hash
          [ab_sampling_default, ab_sample_size_default, ab_status, ab_test_percentage, hours_to_wait, test_id, ab_success_metric].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def self.build_from_hash(attributes)
          new.build_from_hash(attributes)
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)
          attributes = attributes.transform_keys(&:to_sym)
          self.class.openapi_types.each_pair do |key, type|
            if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
              self.send("#{key}=", nil)
            elsif type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :Time
            Time.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :Boolean
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            # models (e.g. Pet) or oneOf
            klass = Hubspot::Marketing::Emails.const_get(type)
            klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = self.send(attr)
            if value.nil?
              is_nullable = self.class.openapi_nullable.include?(attr)
              next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
            end

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end

      end

    end
  end
end
