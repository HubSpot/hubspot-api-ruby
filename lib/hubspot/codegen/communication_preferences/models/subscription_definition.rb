=begin
#Subscriptions

#Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module Hubspot
  module CommunicationPreferences
    class SubscriptionDefinition
      # The ID of the definition.
      attr_accessor :id

      # The name of the subscription.
      attr_accessor :name

      # A description of the subscription.
      attr_accessor :description

      # The purpose of this subscription or the department in your organization that uses it.
      attr_accessor :purpose

      # The method or technology used to contact.
      attr_accessor :communication_method

      # Whether the definition is active or archived.
      attr_accessor :is_active

      # A subscription definition created by HubSpot.
      attr_accessor :is_default

      # A default description that is used by some HubSpot tools and cannot be edited.
      attr_accessor :is_internal

      # Time at which the definition was created.
      attr_accessor :created_at

      # Time at which the definition was last updated.
      attr_accessor :updated_at

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :'id' => :'id',
          :'name' => :'name',
          :'description' => :'description',
          :'purpose' => :'purpose',
          :'communication_method' => :'communicationMethod',
          :'is_active' => :'isActive',
          :'is_default' => :'isDefault',
          :'is_internal' => :'isInternal',
          :'created_at' => :'createdAt',
          :'updated_at' => :'updatedAt'
        }
      end

      # Returns all the JSON keys this model knows about
      def self.acceptable_attributes
        attribute_map.values
      end

      # Attribute type mapping.
      def self.openapi_types
        {
          :'id' => :'String',
          :'name' => :'String',
          :'description' => :'String',
          :'purpose' => :'String',
          :'communication_method' => :'String',
          :'is_active' => :'Boolean',
          :'is_default' => :'Boolean',
          :'is_internal' => :'Boolean',
          :'created_at' => :'Time',
          :'updated_at' => :'Time'
        }
      end

      # List of attributes with nullable: true
      def self.openapi_nullable
        Set.new([
        ])
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        if (!attributes.is_a?(Hash))
          fail ArgumentError, "The input argument (attributes) must be a hash in `Hubspot::CommunicationPreferences::SubscriptionDefinition` initialize method"
        end

        # check to see if the attribute exists and convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h|
          if (!self.class.attribute_map.key?(k.to_sym))
            fail ArgumentError, "`#{k}` is not a valid attribute in `Hubspot::CommunicationPreferences::SubscriptionDefinition`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
          end
          h[k.to_sym] = v
        }

        if attributes.key?(:'id')
          self.id = attributes[:'id']
        end

        if attributes.key?(:'name')
          self.name = attributes[:'name']
        end

        if attributes.key?(:'description')
          self.description = attributes[:'description']
        end

        if attributes.key?(:'purpose')
          self.purpose = attributes[:'purpose']
        end

        if attributes.key?(:'communication_method')
          self.communication_method = attributes[:'communication_method']
        end

        if attributes.key?(:'is_active')
          self.is_active = attributes[:'is_active']
        end

        if attributes.key?(:'is_default')
          self.is_default = attributes[:'is_default']
        end

        if attributes.key?(:'is_internal')
          self.is_internal = attributes[:'is_internal']
        end

        if attributes.key?(:'created_at')
          self.created_at = attributes[:'created_at']
        end

        if attributes.key?(:'updated_at')
          self.updated_at = attributes[:'updated_at']
        end
      end

      # Show invalid properties with the reasons. Usually used together with valid?
      # @return Array for valid properties with the reasons
      def list_invalid_properties
        invalid_properties = Array.new
        if @id.nil?
          invalid_properties.push('invalid value for "id", id cannot be nil.')
        end

        if @name.nil?
          invalid_properties.push('invalid value for "name", name cannot be nil.')
        end

        if @description.nil?
          invalid_properties.push('invalid value for "description", description cannot be nil.')
        end

        if @is_active.nil?
          invalid_properties.push('invalid value for "is_active", is_active cannot be nil.')
        end

        if @is_default.nil?
          invalid_properties.push('invalid value for "is_default", is_default cannot be nil.')
        end

        if @is_internal.nil?
          invalid_properties.push('invalid value for "is_internal", is_internal cannot be nil.')
        end

        if @created_at.nil?
          invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
        end

        if @updated_at.nil?
          invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
        end

        invalid_properties
      end

      # Check to see if the all the properties in the model are valid
      # @return true if the model is valid
      def valid?
        return false if @id.nil?
        return false if @name.nil?
        return false if @description.nil?
        return false if @is_active.nil?
        return false if @is_default.nil?
        return false if @is_internal.nil?
        return false if @created_at.nil?
        return false if @updated_at.nil?
        true
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(o)
        return true if self.equal?(o)
        self.class == o.class &&
            id == o.id &&
            name == o.name &&
            description == o.description &&
            purpose == o.purpose &&
            communication_method == o.communication_method &&
            is_active == o.is_active &&
            is_default == o.is_default &&
            is_internal == o.is_internal &&
            created_at == o.created_at &&
            updated_at == o.updated_at
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(o)
        self == o
      end

      # Calculates hash code according to all attributes.
      # @return [Integer] Hash code
      def hash
        [id, name, description, purpose, communication_method, is_active, is_default, is_internal, created_at, updated_at].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def self.build_from_hash(attributes)
        new.build_from_hash(attributes)
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        attributes = attributes.transform_keys(&:to_sym)
        self.class.openapi_types.each_pair do |key, type|
          if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
            self.send("#{key}=", nil)
          elsif type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the attribute
            # is documented as an array but the input is not
            if attributes[self.class.attribute_map[key]].is_a?(Array)
              self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
            end
          elsif !attributes[self.class.attribute_map[key]].nil?
            self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
          end
        end

        self
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def _deserialize(type, value)
        case type.to_sym
        when :Time
          Time.parse(value)
        when :Date
          Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :Boolean
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          # models (e.g. Pet) or oneOf
          klass = Hubspot::CommunicationPreferences.const_get(type)
          klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = self.send(attr)
          if value.nil?
            is_nullable = self.class.openapi_nullable.include?(attr)
            next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
          end

          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end

    end

  end
end
