=begin
#HubDB endpoints

#HubDB is a relational data store that presents data as rows, columns, and cells in a table, much like a spreadsheet. HubDB tables can be added or modified [in the HubSpot CMS](https://knowledge.hubspot.com/cos-general/how-to-edit-hubdb-tables), but you can also use the API endpoints documented here. For more information on HubDB tables and using their data on a HubSpot site, see the [CMS developers site](https://designers.hubspot.com/docs/tools/hubdb). You can also see the [documentation for dynamic pages](https://designers.hubspot.com/docs/tutorials/how-to-build-dynamic-pages-with-hubdb) for more details about the `useForPages` field.  HubDB tables support `draft` and `published` versions. This allows you to update data in the table, either for testing or to allow for a manual approval process, without affecting any live pages using the existing data. Draft data can be reviewed, and published by a user working in HubSpot or published via the API. Draft data can also be discarded, allowing users to go back to the published version of the data without disrupting it. If a table is set to be `allowed for public access`, you can access the published version of the table and rows without any authentication by specifying the portal id via the query parameter `portalId`.

The version of the OpenAPI document: v3

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Hubspot::Cms::Hubdb::RowsBatchApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'RowsBatchApi' do
  before do
    # run before each test
    @api_instance = Hubspot::Cms::Hubdb::RowsBatchApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RowsBatchApi' do
    it 'should create an instance of RowsBatchApi' do
      expect(@api_instance).to be_instance_of(Hubspot::Cms::Hubdb::RowsBatchApi)
    end
  end

  # unit tests for batch_clone_draft_table_rows
  # Clone rows in batch
  # Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
  # @param table_id_or_name The ID or name of the table
  # @param batch_input_string The JSON array of row ids
  # @param [Hash] opts the optional parameters
  # @return [BatchResponseHubDbTableRowV3]
  describe 'batch_clone_draft_table_rows test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for batch_create_draft_table_rows
  # Create rows in batch
  # Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
  # @param table_id_or_name The ID or name of the table
  # @param batch_input_hub_db_table_row_v3_request JSON array of row objects
  # @param [Hash] opts the optional parameters
  # @return [BatchResponseHubDbTableRowV3]
  describe 'batch_create_draft_table_rows test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for batch_purge_draft_table_rows
  # Permanently deletes rows
  # Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
  # @param table_id_or_name The ID or name of the table
  # @param batch_input_string JSON array of row ids.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'batch_purge_draft_table_rows test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for batch_read_draft_table_rows
  # Get a set of rows from draft table
  # Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
  # @param table_id_or_name The ID or name of the table
  # @param batch_input_string JSON array of row ids.
  # @param [Hash] opts the optional parameters
  # @return [BatchResponseHubDbTableRowV3]
  describe 'batch_read_draft_table_rows test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for batch_read_table_rows
  # Get a set of rows
  # Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
  # @param table_id_or_name The ID or name of the table to query.
  # @param batch_input_string The JSON array of row ids
  # @param [Hash] opts the optional parameters
  # @return [BatchResponseHubDbTableRowV3]
  describe 'batch_read_table_rows test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for batch_replace_draft_table_rows
  # Replace rows in batch in draft table
  # Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
  # @param table_id_or_name The ID or name of the table
  # @param batch_input_hub_db_table_row_v3_request JSON array of row objects.
  # @param [Hash] opts the optional parameters
  # @return [BatchResponseHubDbTableRowV3]
  describe 'batch_replace_draft_table_rows test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for batch_update_draft_table_rows
  # Update rows in batch in draft table
  # Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
  # @param table_id_or_name The ID or name of the table
  # @param batch_input_json_node JSON array of row objects.
  # @param [Hash] opts the optional parameters
  # @return [BatchResponseHubDbTableRowV3]
  describe 'batch_update_draft_table_rows test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
